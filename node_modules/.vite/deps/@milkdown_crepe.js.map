{
  "version": 3,
  "sources": ["../../@milkdown/plugin-history/src/index.ts", "../../@milkdown/plugin-indent/src/index.ts", "../../@milkdown/plugin-clipboard/src/index.ts", "../../@milkdown/plugin-trailing/src/index.ts", "../../@milkdown/crepe/src/feature/index.ts", "../../@milkdown/crepe/src/core/slice.ts", "../../@milkdown/crepe/src/core/crepe.ts"],
  "sourcesContent": ["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\nimport { commandsCtx } from '@milkdown/core'\nimport { history as prosemirrorHistory, redo, undo } from '@milkdown/prose/history'\nimport { $command, $ctx, $prose, $useKeymap } from '@milkdown/utils'\n\nfunction withMeta<T extends MilkdownPlugin>(plugin: T, meta: Partial<Meta> & Pick<Meta, 'displayName'>): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/plugin-history',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n\n/// The milkdown command wrapper of [undo API](https://prosemirror.net/docs/ref/#history.undo) in [prosemirror-history](https://prosemirror.net/docs/ref/#history).\nexport const undoCommand = $command('Undo', () => () => undo)\n\nwithMeta(undoCommand, {\n  displayName: 'Command<undo>',\n})\n\n/// The milkdown command wrapper of [redo API](https://prosemirror.net/docs/ref/#history.redo) in [prosemirror-history](https://prosemirror.net/docs/ref/#history).\nexport const redoCommand = $command('Redo', () => () => redo)\n\nwithMeta(redoCommand, {\n  displayName: 'Command<redo>',\n})\n\n/// The [config](https://prosemirror.net/docs/ref/#history.history%5Econfig) of prosemirror history plugin.\nexport const historyProviderConfig = $ctx<{ depth?: number, newGroupDelay?: number }, 'historyProviderConfig'>({}, 'historyProviderConfig')\n\nwithMeta(historyProviderConfig, {\n  displayName: 'Ctx<historyProviderConfig>',\n})\n\n/// The milkdown wrapper of [history API](https://prosemirror.net/docs/ref/#history.history) in [prosemirror-history](https://prosemirror.net/docs/ref/#history).\nexport const historyProviderPlugin = $prose(ctx => prosemirrorHistory(ctx.get(historyProviderConfig.key)))\n\nwithMeta(historyProviderPlugin, {\n  displayName: 'Ctx<historyProviderPlugin>',\n})\n\n/// The keymap of history plugin, it's `mod-z` for undo and `mod-y`/`shift-mod-z` for redo.\nexport const historyKeymap = $useKeymap('historyKeymap', {\n  Undo: {\n    shortcuts: 'Mod-z',\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(undoCommand.key)\n    },\n  },\n  Redo: {\n    shortcuts: ['Mod-y', 'Shift-Mod-z'],\n    command: (ctx) => {\n      const commands = ctx.get(commandsCtx)\n      return () => commands.call(redoCommand.key)\n    },\n  },\n})\n\nwithMeta(historyKeymap.ctx, {\n  displayName: 'KeymapCtx<history>',\n})\nwithMeta(historyKeymap.shortcuts, {\n  displayName: 'Keymap<history>',\n})\n\n/// The milkdown history plugin.\nexport const history: MilkdownPlugin[] = [historyProviderConfig, historyProviderPlugin, historyKeymap, undoCommand, redoCommand].flat()\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport type { Transaction } from '@milkdown/prose/state'\nimport { AllSelection, TextSelection } from '@milkdown/prose/state'\nimport { $ctx, $shortcut } from '@milkdown/utils'\n\n/// Add indent config.\nexport interface IndentConfigOptions {\n  /// The type of indent, `space` or `tab`. By default, it's `space`.\n  type: 'space' | 'tab'\n  /// The size of indent. By default, it's `2`.\n  size: number\n}\n\nfunction updateIndent(tr: Transaction, options: IndentConfigOptions): Transaction {\n  const { doc, selection } = tr\n\n  if (!doc || !selection)\n    return tr\n\n  if (!(selection instanceof TextSelection || selection instanceof AllSelection))\n    return tr\n\n  const { to } = selection\n\n  const text = options.type === 'space' ? Array(options.size).fill(' ').join('') : '\\t'\n\n  return tr.insertText(text, to)\n}\n\n/// A slice contains the indent config.\n/// You can use [IndentConfigOptions](#IndentConfigOptions) to customize the behavior of the plugin.\n///\n/// ```ts\n/// import { indent, indentConfig } from '@milkdown/plugin-indent'\n///\n/// Editor\n///   .make()\n///   .config((ctx) => {\n///     ctx.set(indentConfig.key, {\n///       type: 'space',\n///       size: 4,\n///     })\n///   })\n/// ```\nexport const indentConfig = $ctx<IndentConfigOptions, 'indentConfig'>({ type: 'space', size: 2 }, 'indentConfig')\n\nindentConfig.meta = {\n  package: '@milkdown/plugin-indent',\n  displayName: 'Ctx<indentConfig>',\n}\n\n/// Add indent shortcut, when users press `Tab`, the plugin will insert indent text.\nexport const indentPlugin = $shortcut(ctx => ({\n  Tab: (state, dispatch) => {\n    const config = ctx.get(indentConfig.key)\n    const { tr } = state\n    const _tr = updateIndent(tr, config)\n\n    if (_tr.docChanged) {\n      dispatch?.(_tr)\n      return true\n    }\n\n    return false\n  },\n}))\n\nindentPlugin.meta = {\n  package: '@milkdown/plugin-indent',\n  displayName: 'Shortcut<indent>',\n}\n\n/// The plugin of indent.\nexport const indent: MilkdownPlugin[] = [indentConfig, indentPlugin]\n", "import { editorViewOptionsCtx, parserCtx, schemaCtx, serializerCtx } from '@milkdown/core'\nimport { getNodeFromSchema } from '@milkdown/prose'\nimport type { Node, Slice } from '@milkdown/prose/model'\nimport { DOMParser, DOMSerializer } from '@milkdown/prose/model'\nimport { Plugin, PluginKey, TextSelection } from '@milkdown/prose/state'\nimport { $prose } from '@milkdown/utils'\n\ntype UnknownRecord = Record<string, unknown>\nfunction isPureText(content: UnknownRecord | UnknownRecord[] | undefined | null): boolean {\n  if (!content)\n    return false\n  if (Array.isArray(content)) {\n    if (content.length > 1)\n      return false\n    return isPureText(content[0])\n  }\n\n  const child = content.content\n  if (child)\n    return isPureText(child as UnknownRecord[])\n\n  return content.type === 'text'\n}\n\nfunction isTextOnlySlice(slice: Slice): Node | false {\n  if (slice.content.childCount === 1) {\n    const node = slice.content.firstChild\n    if (node?.type.name === 'text' && node.marks.length === 0)\n      return node\n\n    if (node?.type.name === 'paragraph' && node.childCount === 1) {\n      const _node = node.firstChild\n      if (_node?.type.name === 'text' && _node.marks.length === 0)\n        return _node\n    }\n  }\n\n  return false\n}\n\n/// The prosemirror plugin for clipboard.\nexport const clipboard = $prose((ctx) => {\n  const schema = ctx.get(schemaCtx)\n\n  // Set editable props for https://github.com/Milkdown/milkdown/issues/190\n  ctx.update(editorViewOptionsCtx, prev => ({\n    ...prev,\n    editable: prev.editable ?? (() => true),\n  }))\n\n  const key = new PluginKey('MILKDOWN_CLIPBOARD')\n  const plugin = new Plugin({\n    key,\n    props: {\n      handlePaste: (view, event) => {\n        const parser = ctx.get(parserCtx)\n        const editable = view.props.editable?.(view.state)\n        const { clipboardData } = event\n        if (!editable || !clipboardData)\n          return false\n\n        const currentNode = view.state.selection.$from.node()\n        if (currentNode.type.spec.code)\n          return false\n\n        const text = clipboardData.getData('text/plain')\n\n        // if is copied from vscode, try to create a code block\n        const vscodeData = clipboardData.getData('vscode-editor-data')\n        if (vscodeData) {\n          const data = JSON.parse(vscodeData)\n          const language = data?.mode\n          if (text && language) {\n            const { tr } = view.state\n            const codeBlock = getNodeFromSchema('code_block', schema)\n\n            tr.replaceSelectionWith(codeBlock.create({ language }))\n              .setSelection(\n                TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))),\n              )\n              .insertText(text.replace(/\\r\\n?/g, '\\n'))\n\n            view.dispatch(tr)\n            return true\n          }\n        }\n\n        const html = clipboardData.getData('text/html')\n        if (html.length === 0 && text.length === 0)\n          return false\n\n        const domParser = DOMParser.fromSchema(schema)\n        let dom\n        if (html.length === 0) {\n          const slice = parser(text)\n          if (!slice || typeof slice === 'string')\n            return false\n\n          dom = DOMSerializer.fromSchema(schema).serializeFragment(slice.content)\n        }\n        else {\n          const template = document.createElement('template')\n          template.innerHTML = html\n          dom = template.content.cloneNode(true)\n          template.remove()\n        }\n\n        const slice = domParser.parseSlice(dom)\n        const node = isTextOnlySlice(slice)\n        if (node) {\n          view.dispatch(view.state.tr.replaceSelectionWith(node, true))\n          return true\n        }\n\n        view.dispatch(view.state.tr.replaceSelection(slice))\n        return true\n      },\n      clipboardTextSerializer: (slice) => {\n        const serializer = ctx.get(serializerCtx)\n        const isText = isPureText(slice.content.toJSON())\n        if (isText)\n          return (slice.content as unknown as Node).textBetween(0, slice.content.size, '\\n\\n')\n\n        const doc = schema.topNodeType.createAndFill(undefined, slice.content)\n        if (!doc)\n          return ''\n        const value = serializer(doc)\n        return value\n      },\n    },\n  })\n\n  return plugin\n})\n\nclipboard.meta = {\n  displayName: 'Prose<clipboard>',\n  package: '@milkdown/plugin-clipboard',\n}\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport type { Node } from '@milkdown/prose/model'\nimport type { EditorState } from '@milkdown/prose/state'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport { $ctx, $prose } from '@milkdown/utils'\n\n/// Options for trailing config.\nexport interface TrailingConfigOptions {\n  /// A function that returns a boolean value.\n  /// If it returns `true`, the plugin will append a node at the end of the document.\n  /// By default, it returns `false` if the last node is a heading or a paragraph.\n  shouldAppend: (lastNode: Node | null, state: EditorState) => boolean\n  /// A function that returns a node.\n  /// By default, it returns a paragraph node.\n  getNode: (state: EditorState) => Node\n}\n\n/// A slice contains the trailing config.\n/// You can use [TrailingConfigOptions](#TrailingConfigOptions) to customize the behavior of the plugin.\nexport const trailingConfig = $ctx<TrailingConfigOptions, 'trailingConfig'>({\n  shouldAppend: (lastNode) => {\n    if (!lastNode)\n      return false\n\n    if (['heading', 'paragraph'].includes(lastNode.type.name))\n      return false\n\n    return true\n  },\n  getNode: state => state.schema.nodes.paragraph!.create(),\n}, 'trailingConfig')\n\ntrailingConfig.meta = {\n  package: '@milkdown/plugin-trailing',\n  displayName: 'Ctx<trailingConfig>',\n}\n\n/// The prosemirror plugin for trailing.\nexport const trailingPlugin = $prose((ctx) => {\n  const trailingPluginKey = new PluginKey('MILKDOWN_TRAILING')\n  const { shouldAppend, getNode } = ctx.get(trailingConfig.key)\n  const plugin = new Plugin({\n    key: trailingPluginKey,\n    state: {\n      init: (_, state) => {\n        const lastNode = state.tr.doc.lastChild\n\n        return shouldAppend(lastNode, state)\n      },\n      apply: (tr, value, _, state) => {\n        if (!tr.docChanged)\n          return value\n\n        const lastNode = tr.doc.lastChild\n\n        return shouldAppend(lastNode, state)\n      },\n    },\n    appendTransaction: (_, __, state) => {\n      const { doc, tr } = state\n      const nodeType = getNode?.(state)\n      const shouldInsertNodeAtEnd = plugin.getState(state)\n      const endPosition = doc.content.size\n\n      if (!shouldInsertNodeAtEnd || !nodeType)\n        return\n\n      return tr.insert(endPosition, nodeType)\n    },\n  })\n\n  return plugin\n})\n\ntrailingPlugin.meta = {\n  package: '@milkdown/plugin-trailing',\n  displayName: 'Prose<trailing>',\n}\n\n/// All plugins exported by this package.\nexport const trailing: MilkdownPlugin[] = [trailingConfig, trailingPlugin]\n", "import type { Editor } from '@milkdown/kit/core'\nimport type { PlaceHolderFeatureConfig } from './placeholder'\nimport type { CodeMirrorFeatureConfig } from './code-mirror'\nimport type { BlockEditFeatureConfig } from './block-edit'\nimport type { CursorFeatureConfig } from './cursor'\nimport type { ImageBlockFeatureConfig } from './image-block'\nimport type { LinkTooltipFeatureConfig } from './link-tooltip'\nimport type { ListItemFeatureConfig } from './list-item'\nimport type { ToolbarFeatureConfig } from './toolbar'\nimport type { TableFeatureConfig } from './table'\n\nexport enum CrepeFeature {\n  CodeMirror = 'code-mirror',\n  ListItem = 'list-item',\n  LinkTooltip = 'link-tooltip',\n  Cursor = 'cursor',\n  ImageBlock = 'image-block',\n  BlockEdit = 'block-edit',\n  Toolbar = 'toolbar',\n  Placeholder = 'placeholder',\n  Table = 'table',\n}\n\nexport interface CrepeFeatureConfig {\n  [CrepeFeature.Cursor]?: CursorFeatureConfig\n  [CrepeFeature.ListItem]?: ListItemFeatureConfig\n  [CrepeFeature.LinkTooltip]?: LinkTooltipFeatureConfig\n  [CrepeFeature.ImageBlock]?: ImageBlockFeatureConfig\n  [CrepeFeature.BlockEdit]?: BlockEditFeatureConfig\n  [CrepeFeature.Placeholder]?: PlaceHolderFeatureConfig\n  [CrepeFeature.Toolbar]?: ToolbarFeatureConfig\n  [CrepeFeature.CodeMirror]?: CodeMirrorFeatureConfig\n  [CrepeFeature.Table]?: TableFeatureConfig\n}\n\nexport const defaultFeatures: Record<CrepeFeature, boolean> = {\n  [CrepeFeature.Cursor]: true,\n  [CrepeFeature.ListItem]: true,\n  [CrepeFeature.LinkTooltip]: true,\n  [CrepeFeature.ImageBlock]: true,\n  [CrepeFeature.BlockEdit]: true,\n  [CrepeFeature.Placeholder]: true,\n  [CrepeFeature.Toolbar]: true,\n  [CrepeFeature.CodeMirror]: true,\n  [CrepeFeature.Table]: true,\n}\n\nexport async function loadFeature(feature: CrepeFeature, editor: Editor, config?: never) {\n  switch (feature) {\n    case CrepeFeature.CodeMirror: {\n      const { defineFeature } = await import('./code-mirror')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.ListItem: {\n      const { defineFeature } = await import('./list-item')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.LinkTooltip: {\n      const { defineFeature } = await import('./link-tooltip')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.ImageBlock: {\n      const { defineFeature } = await import('./image-block')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.Cursor: {\n      const { defineFeature } = await import('./cursor')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.BlockEdit: {\n      const { defineFeature } = await import('./block-edit')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.Placeholder: {\n      const { defineFeature } = await import('./placeholder')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.Toolbar: {\n      const { defineFeature } = await import('./toolbar')\n      return defineFeature(editor, config)\n    }\n    case CrepeFeature.Table: {\n      const { defineFeature } = await import('./table')\n      return defineFeature(editor, config)\n    }\n  }\n}\n", "import type { Ctx } from '@milkdown/kit/ctx'\nimport { createSlice } from '@milkdown/kit/ctx'\nimport type { CrepeFeature } from '../feature'\n\nexport const FeaturesCtx = createSlice([] as CrepeFeature[], 'FeaturesCtx')\n\nexport function configureFeatures(features: CrepeFeature[]) {\n  return (ctx: Ctx) => {\n    ctx.inject(FeaturesCtx, features)\n  }\n}\n", "import type { DefaultValue } from '@milkdown/kit/core'\nimport { Editor, defaultValueCtx, editorViewOptionsCtx, rootCtx } from '@milkdown/kit/core'\n\nimport { commonmark } from '@milkdown/kit/preset/commonmark'\nimport { gfm } from '@milkdown/kit/preset/gfm'\nimport { history } from '@milkdown/kit/plugin/history'\nimport { indent, indentConfig } from '@milkdown/kit/plugin/indent'\nimport { getMarkdown } from '@milkdown/kit/utils'\nimport { clipboard } from '@milkdown/kit/plugin/clipboard'\nimport { trailing } from '@milkdown/kit/plugin/trailing'\n\nimport type { CrepeFeatureConfig } from '../feature'\nimport { CrepeFeature, defaultFeatures, loadFeature } from '../feature'\nimport { configureFeatures } from './slice'\n\nexport interface CrepeConfig {\n  features?: Partial<Record<CrepeFeature, boolean>>\n  featureConfigs?: CrepeFeatureConfig\n  root?: Node | string | null\n  defaultValue?: DefaultValue\n}\n\nexport class Crepe {\n  static Feature = CrepeFeature\n  readonly #editor: Editor\n  readonly #initPromise: Promise<unknown>\n  readonly #rootElement: Node\n  #editable = true\n\n  constructor({\n    root,\n    features = {},\n    featureConfigs = {},\n    defaultValue = '',\n  }: CrepeConfig) {\n    const enabledFeatures = Object\n      .entries({\n        ...defaultFeatures,\n        ...features,\n      })\n      .filter(([, enabled]) => enabled)\n      .map(([feature]) => feature as CrepeFeature)\n\n    this.#rootElement = (typeof root === 'string' ? document.querySelector(root) : root) ?? document.body\n    this.#editor = Editor.make()\n      .config(configureFeatures(enabledFeatures))\n      .config((ctx) => {\n        ctx.set(rootCtx, this.#rootElement)\n        ctx.set(defaultValueCtx, defaultValue)\n        ctx.set(editorViewOptionsCtx, {\n          editable: () => this.#editable,\n        })\n        ctx.update(indentConfig.key, value => ({\n          ...value,\n          size: 4,\n        }))\n      })\n      .use(commonmark)\n      .use(history)\n      .use(indent)\n      .use(trailing)\n      .use(clipboard)\n      .use(gfm)\n\n    const promiseList: Promise<unknown>[] = []\n\n    enabledFeatures.forEach((feature) => {\n      const config = (featureConfigs as Partial<Record<CrepeFeature, never>>)[feature]\n      promiseList.push(\n        loadFeature(feature, this.#editor, config),\n      )\n    })\n\n    this.#initPromise = Promise.all(promiseList)\n  }\n\n  async create() {\n    await this.#initPromise\n    return this.#editor.create()\n  }\n\n  async destroy() {\n    await this.#initPromise\n    return this.#editor.destroy()\n  }\n\n  get editor(): Editor {\n    return this.#editor\n  }\n\n  setReadonly(value: boolean) {\n    this.#editable = !value\n    return this\n  }\n\n  getMarkdown() {\n    return this.#editor.action(getMarkdown())\n  }\n}\n"],
  "mappings": "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",
  "names": ["withMeta", "plugin", "meta", "undoCommand", "$command", "undo", "redoCommand", "redo", "historyProviderConfig", "$ctx", "historyProviderPlugin", "$prose", "ctx", "prosemirrorHistory", "historyKeymap", "$useKeymap", "commands", "commandsCtx", "history", "updateIndent", "tr", "options", "doc", "selection", "TextSelection", "AllSelection", "to", "text", "indentConfig", "$ctx", "indentPlugin", "$shortcut", "ctx", "state", "dispatch", "config", "_tr", "indent", "isPureText", "content", "child", "isTextOnlySlice", "slice", "node", "_node", "clipboard", "$prose", "ctx", "schema", "schemaCtx", "editorViewOptionsCtx", "prev", "key", "PluginKey", "Plugin", "view", "event", "parser", "parserCtx", "editable", "_b", "_a", "clipboardData", "text", "vscodeData", "data", "language", "tr", "codeBlock", "getNodeFromSchema", "TextSelection", "html", "domParser", "DOMParser", "dom", "DOMSerializer", "template", "serializer", "serializerCtx", "doc", "trailingConfig", "$ctx", "lastNode", "state", "trailingPlugin", "$prose", "ctx", "trailingPluginKey", "PluginKey", "shouldAppend", "getNode", "plugin", "Plugin", "_", "tr", "value", "__", "doc", "nodeType", "shouldInsertNodeAtEnd", "endPosition", "trailing", "CrepeFeature"]
}
