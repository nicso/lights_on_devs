{
  "version": 3,
  "sources": ["../../@milkdown/plugin-tooltip/src/tooltip-provider.ts", "../../@milkdown/plugin-tooltip/src/tooltip-plugin.ts", "../../@milkdown/components/src/__internal__/meta.ts", "../../@milkdown/components/src/link-tooltip/slices.ts", "../../@milkdown/components/src/link-tooltip/tooltips.ts", "../../@milkdown/components/src/link-tooltip/utils.ts", "../../@milkdown/components/src/__internal__/helper.ts", "../../@milkdown/components/src/link-tooltip/preview/preview-component.ts", "../../@milkdown/components/src/link-tooltip/preview/preview-view.ts", "../../@milkdown/components/src/link-tooltip/preview/preview-configure.ts", "../../@milkdown/components/src/link-tooltip/edit/edit-component.ts", "../../@milkdown/components/src/link-tooltip/edit/edit-view.ts", "../../@milkdown/components/src/link-tooltip/edit/edit-configure.ts", "../../@milkdown/components/src/link-tooltip/configure.ts", "../../@milkdown/components/src/link-tooltip/index.ts"],
  "sourcesContent": ["import type { EditorState } from '@milkdown/prose/state'\nimport { TextSelection } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\nimport debounce from 'lodash.debounce'\nimport type { VirtualElement } from '@floating-ui/dom'\nimport { computePosition, flip, offset } from '@floating-ui/dom'\nimport { posToDOMRect } from '@milkdown/prose'\n\n/// Options for tooltip provider.\nexport interface TooltipProviderOptions {\n  /// The tooltip content.\n  content: HTMLElement\n  /// The debounce time for updating tooltip, 200ms by default.\n  debounce?: number\n  /// The function to determine whether the tooltip should be shown.\n  shouldShow?: (view: EditorView, prevState?: EditorState) => boolean\n  /// The offset to get the block. Default is 0.\n  offset?: number | {\n    mainAxis?: number\n    crossAxis?: number\n    alignmentAxis?: number | null\n  }\n}\n\n/// A provider for creating tooltip.\nexport class TooltipProvider {\n  /// @internal\n  readonly #debounce: number\n\n  /// @internal\n  readonly #shouldShow: (view: EditorView, prevState?: EditorState) => boolean\n\n  /// @internal\n  #initialized = false\n\n  /// @internal\n  readonly #offset?: number | {\n    mainAxis?: number\n    crossAxis?: number\n    alignmentAxis?: number | null\n  }\n\n  /// The root element of the tooltip.\n  element: HTMLElement\n\n  /// On show callback.\n  onShow = () => {}\n\n  /// On hide callback.\n  onHide = () => {}\n\n  constructor(options: TooltipProviderOptions) {\n    this.element = options.content\n    this.#debounce = options.debounce ?? 200\n    this.#shouldShow = options.shouldShow ?? this.#_shouldShow\n    this.#offset = options.offset\n    this.element.dataset.show = 'false'\n  }\n\n  /// @internal\n  #onUpdate = (view: EditorView, prevState?: EditorState): void => {\n    const { state, composing } = view\n    const { selection, doc } = state\n    const { ranges } = selection\n    const from = Math.min(...ranges.map(range => range.$from.pos))\n    const to = Math.max(...ranges.map(range => range.$to.pos))\n    const isSame = prevState && prevState.doc.eq(doc) && prevState.selection.eq(selection)\n\n    if (!this.#initialized) {\n      view.dom.parentElement?.appendChild(this.element)\n      this.#initialized = true\n    }\n\n    if (composing || isSame)\n      return\n\n    if (!this.#shouldShow(view, prevState)) {\n      this.hide()\n      return\n    }\n\n    const virtualEl: VirtualElement = {\n      getBoundingClientRect: () => posToDOMRect(view, from, to),\n    }\n    computePosition(virtualEl, this.element, {\n      placement: 'top',\n      middleware: [flip(), offset(this.#offset)],\n    })\n      .then(({ x, y }) => {\n        Object.assign(this.element.style, {\n          left: `${x}px`,\n          top: `${y}px`,\n        })\n      })\n\n    this.show()\n  }\n\n  /// Update provider state by editor view.\n  update = (view: EditorView, prevState?: EditorState): void => {\n    const updater = debounce(this.#onUpdate, this.#debounce)\n\n    updater(view, prevState)\n  }\n\n  /// @internal\n  #_shouldShow(view: EditorView): boolean {\n    const { doc, selection } = view.state\n    const { empty, from, to } = selection\n\n    const isEmptyTextBlock = !doc.textBetween(from, to).length && view.state.selection instanceof TextSelection\n\n    const isTooltipChildren = this.element.contains(document.activeElement)\n\n    const notHasFocus = !view.hasFocus() && !isTooltipChildren\n\n    const isReadonly = !view.editable\n\n    if (\n      notHasFocus\n      || empty\n      || isEmptyTextBlock\n      || isReadonly\n    )\n      return false\n\n    return true\n  }\n\n  /// Destroy the tooltip.\n  destroy = () => {}\n\n  /// Show the tooltip.\n  show = (virtualElement?: VirtualElement) => {\n    this.element.dataset.show = 'true'\n\n    if (virtualElement) {\n      computePosition(virtualElement, this.element, {\n        placement: 'top',\n        middleware: [flip(), offset(this.#offset)],\n      })\n        .then(({ x, y }) => {\n          Object.assign(this.element.style, {\n            left: `${x}px`,\n            top: `${y}px`,\n          })\n        })\n    }\n\n    this.onShow()\n  }\n\n  /// Hide the tooltip.\n  hide = () => {\n    if (this.element.dataset.show === 'false')\n      return\n    this.element.dataset.show = 'false'\n\n    this.onHide()\n  }\n}\n", "import type { SliceType } from '@milkdown/ctx'\nimport type { PluginSpec } from '@milkdown/prose/state'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport type { $Ctx, $Prose } from '@milkdown/utils'\nimport { $ctx, $prose } from '@milkdown/utils'\n\n/// @internal\nexport type TooltipSpecId<Id extends string> = `${Id}_TOOLTIP_SPEC`\n\n/// @internal\nexport type TooltipPlugin<Id extends string, State = any> = [$Ctx<PluginSpec<State>, TooltipSpecId<Id>>, $Prose] & {\n  key: SliceType<PluginSpec<State>, TooltipSpecId<Id>>\n  pluginKey: $Prose['key']\n}\n\n/// Create a tooltip plugin with a unique id.\nexport function tooltipFactory<Id extends string, State = any>(id: Id) {\n  const tooltipSpec = $ctx<PluginSpec<State>, TooltipSpecId<Id>>({}, `${id}_TOOLTIP_SPEC`)\n  const tooltipPlugin = $prose((ctx) => {\n    const spec = ctx.get(tooltipSpec.key)\n    return new Plugin({\n      key: new PluginKey(`${id}_TOOLTIP`),\n      ...spec,\n    })\n  })\n  const result = [tooltipSpec, tooltipPlugin] as TooltipPlugin<Id>\n  result.key = tooltipSpec.key\n  result.pluginKey = tooltipPlugin.key\n  tooltipSpec.meta = {\n    package: '@milkdown/plugin-tooltip',\n    displayName: `Ctx<tooltipSpec>|${id}`,\n  }\n  tooltipPlugin.meta = {\n    package: '@milkdown/plugin-tooltip',\n    displayName: `Prose<tooltip>|${id}`,\n  }\n\n  return result\n}\n", "import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(plugin: T, meta: Partial<Meta> & Pick<Meta, 'displayName'>): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n", "import { $ctx } from '@milkdown/utils'\nimport type { Mark } from '@milkdown/prose/model'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface LinkToolTipState {\n  mode: 'preview' | 'edit'\n}\n\nconst defaultState: LinkToolTipState = {\n  mode: 'preview',\n}\n\nexport const linkTooltipState = $ctx({ ...defaultState }, 'linkTooltipStateCtx')\n\nwithMeta(linkTooltipState, {\n  displayName: 'State<link-tooltip>',\n  group: 'LinkTooltip',\n})\n\nexport interface LinkTooltipAPI {\n  addLink: (from: number, to: number) => void\n  editLink: (mark: Mark, from: number, to: number) => void\n  removeLink: (from: number, to: number) => void\n}\n\nconst defaultAPI: LinkTooltipAPI = {\n  addLink: () => {},\n  editLink: () => {},\n  removeLink: () => {},\n}\n\nexport const linkTooltipAPI = $ctx({ ...defaultAPI }, 'linkTooltipAPICtx')\n\nwithMeta(linkTooltipState, {\n  displayName: 'API<link-tooltip>',\n  group: 'LinkTooltip',\n})\n\nexport interface LinkTooltipConfig {\n  linkIcon: () => ReturnType<typeof html>\n  editButton: () => ReturnType<typeof html>\n  confirmButton: () => ReturnType<typeof html>\n  removeButton: () => ReturnType<typeof html>\n  onCopyLink: (link: string) => void\n  inputPlaceholder: string\n}\n\nconst defaultConfig: LinkTooltipConfig = {\n  linkIcon: () => '🔗',\n  editButton: () => '✎',\n  removeButton: () => '⌫',\n  confirmButton: () => html`Confirm ⏎`,\n  onCopyLink: () => {},\n  inputPlaceholder: 'Paste link...',\n}\n\nexport const linkTooltipConfig = $ctx({\n  ...defaultConfig,\n}, 'linkTooltipConfigCtx')\n\nwithMeta(linkTooltipState, {\n  displayName: 'Config<link-tooltip>',\n  group: 'LinkTooltip',\n})\n", "import { tooltipFactory } from '@milkdown/plugin-tooltip'\nimport { withMeta } from '../__internal__/meta'\n\nexport const linkPreviewTooltip = tooltipFactory('LINK_PREVIEW')\nwithMeta(linkPreviewTooltip[0], {\n  displayName: 'PreviewTooltipSpec<link-tooltip>',\n  group: 'LinkTooltip',\n})\nwithMeta(linkPreviewTooltip[1], {\n  displayName: 'PreviewTooltipPlugin<link-tooltip>',\n  group: 'LinkTooltip',\n})\nexport const linkEditTooltip = tooltipFactory('LINK_EDIT')\nwithMeta(linkEditTooltip[0], {\n  displayName: 'EditTooltipSpec<link-tooltip>',\n  group: 'LinkTooltip',\n})\nwithMeta(linkEditTooltip[1], {\n  displayName: 'EditTooltipPlugin<link-tooltip>',\n  group: 'LinkTooltip',\n})\n", "import type { Mark, Node } from '@milkdown/prose/model'\nimport type { Ctx } from '@milkdown/ctx'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { linkSchema } from '@milkdown/preset-commonmark'\nimport { linkPreviewTooltip } from './tooltips'\n\nexport function findMarkPosition(mark: Mark, node: Node, doc: Node, from: number, to: number) {\n  let markPos = { start: -1, end: -1 }\n  doc.nodesBetween(from, to, (n, pos) => {\n    // stop recursive finding if result is found\n    if (markPos.start > -1)\n      return false\n\n    if (markPos.start === -1 && mark.isInSet(n.marks) && node === n) {\n      markPos = {\n        start: pos,\n        end: pos + Math.max(n.textContent.length, 1),\n      }\n    }\n\n    return undefined\n  })\n\n  return markPos\n}\n\nexport function shouldShowPreviewWhenHover(ctx: Ctx, view: EditorView, event: MouseEvent) {\n  const $pos = view.posAtCoords({ left: event.clientX, top: event.clientY })\n  if (!$pos)\n    return\n\n  const { pos } = $pos\n  const node = view.state.doc.nodeAt(pos)\n\n  if (!node)\n    return\n\n  const mark = node.marks.find(mark => mark.type === linkSchema.mark.type(ctx))\n  if (!mark)\n    return\n\n  const key = linkPreviewTooltip.pluginKey()\n  if (!key)\n    return\n\n  return { show: true, pos, node, mark }\n}\n", "export function defIfNotExists(tagName: string, element: CustomElementConstructor) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element)\n    return\n\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n", "import type { Component } from 'atomico'\nimport { c, html } from 'atomico'\nimport type { LinkTooltipConfig } from '../slices'\n\nexport interface LinkPreviewProps {\n  config: LinkTooltipConfig\n  src: string\n  onEdit: () => void\n  onRemove: () => void\n}\n\nexport const linkPreviewComponent: Component<LinkPreviewProps> = ({ config, src, onEdit, onRemove }) => {\n  const onClickEditButton = (e: MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    onEdit?.()\n  }\n\n  const onClickRemoveButton = (e: MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    onRemove?.()\n  }\n\n  const onClickPreview = (e: MouseEvent) => {\n    e.preventDefault()\n    if (navigator.clipboard && src) {\n      navigator.clipboard.writeText(src)\n        .then(() => {\n          config?.onCopyLink(src)\n        }).catch((e) => {\n          throw e\n        })\n    }\n  }\n\n  return html`\n    <host>\n      <div class=\"link-preview\" onmousedown=${onClickPreview}>\n        <span class=\"link-icon\">\n          ${config?.linkIcon()}\n        </span>\n        <a href=${src} target=\"_blank\" class=\"link-display\">${src}</a>\n        <span class=\"button link-edit-button\" onmousedown=${onClickEditButton}>\n          ${config?.editButton()}\n        </span>\n        <span class=\"button link-remove-button\" onmousedown=${onClickRemoveButton}>\n          ${config?.removeButton()}\n        </span>\n      </div>\n    </host>\n  `\n}\n\nlinkPreviewComponent.props = {\n  config: Object,\n  src: String,\n  onEdit: Function,\n  onRemove: Function,\n}\n\nexport const LinkPreviewElement = c(linkPreviewComponent)\n", "import type { PluginView } from '@milkdown/prose/state'\nimport type { EditorView } from '@milkdown/prose/view'\nimport type { Mark } from '@milkdown/prose/model'\nimport { TooltipProvider } from '@milkdown/plugin-tooltip'\nimport type { Ctx, Slice } from '@milkdown/ctx'\nimport type { LinkToolTipState } from '../slices'\nimport { linkTooltipAPI, linkTooltipConfig, linkTooltipState } from '../slices'\nimport { LinkPreviewElement } from './preview-component'\n\nexport class LinkPreviewTooltip implements PluginView {\n  #content = new LinkPreviewElement()\n  #provider: TooltipProvider\n  #slice: Slice<LinkToolTipState> = this.ctx.use(linkTooltipState.key)\n\n  #hovering = false\n\n  // get #instance() {\n  //   return this.#provider.getInstance()\n  // }\n\n  constructor(readonly ctx: Ctx, view: EditorView) {\n    this.#provider = new TooltipProvider({\n      debounce: 0,\n      content: this.#content,\n      shouldShow: () => false,\n    })\n    this.#provider.update(view)\n    this.#slice = ctx.use(linkTooltipState.key)\n    this.#slice.on(this.#onStateChange)\n  }\n\n  // setRect = (rect: DOMRect) => {\n  //   // this.#provider.getInstance()?.setProps({\n  //   //   getReferenceClientRect: () => rect,\n  //   // })\n  //   this.#provider.virtualElement = {\n  //     getBoundingClientRect: () => rect,\n  //   }\n  // }\n\n  #onStateChange = ({ mode }: LinkToolTipState) => {\n    if (mode === 'edit')\n      this.#hide()\n  }\n\n  #onMouseEnter = () => {\n    this.#hovering = true\n  }\n\n  #onMouseLeave = () => {\n    this.#hovering = false\n  }\n\n  #hide = () => {\n    this.#provider.hide()\n    this.#provider.element.removeEventListener('mouseenter', this.#onMouseEnter)\n    this.#provider.element.removeEventListener('mouseleave', this.#onMouseLeave)\n  }\n\n  show = (mark: Mark, from: number, to: number, rect: DOMRect) => {\n    this.#content.config = this.ctx.get(linkTooltipConfig.key)\n    this.#content.src = mark.attrs.href\n    this.#content.onEdit = () => {\n      this.ctx.get(linkTooltipAPI.key).editLink(mark, from, to)\n    }\n    this.#content.onRemove = () => {\n      this.ctx.get(linkTooltipAPI.key).removeLink(from, to)\n      this.#hide()\n    }\n\n    this.#provider.show({\n      getBoundingClientRect: () => rect,\n    })\n    this.#provider.element.addEventListener('mouseenter', this.#onMouseEnter)\n    this.#provider.element.addEventListener('mouseleave', this.#onMouseLeave)\n  }\n\n  hide = () => {\n    if (this.#hovering)\n      return\n\n    this.#hide()\n  }\n\n  update = () => {}\n\n  destroy = () => {\n    this.#slice.off(this.#onStateChange)\n    this.#provider.destroy()\n    this.#content.remove()\n  }\n}\n", "import type { Ctx } from '@milkdown/ctx'\nimport debounce from 'lodash.debounce'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { posToDOMRect } from '@milkdown/prose'\nimport { linkTooltipState } from '../slices'\nimport { findMarkPosition, shouldShowPreviewWhenHover } from '../utils'\nimport { linkPreviewTooltip } from '../tooltips'\nimport { defIfNotExists } from '../../__internal__/helper'\nimport { LinkPreviewTooltip } from './preview-view'\nimport { LinkPreviewElement } from './preview-component'\n\ndefIfNotExists('milkdown-link-preview', LinkPreviewElement)\nexport function configureLinkPreviewTooltip(ctx: Ctx) {\n  let linkPreviewTooltipView: LinkPreviewTooltip | null\n\n  const DELAY = 200\n  const onMouseMove = debounce((view: EditorView, event: MouseEvent) => {\n    if (!linkPreviewTooltipView)\n      return\n    if (!view.hasFocus())\n      return\n\n    const state = ctx.get(linkTooltipState.key)\n    if (state.mode === 'edit')\n      return\n\n    const result = shouldShowPreviewWhenHover(ctx, view, event)\n    if (result) {\n      const position = view.state.doc.resolve(result.pos)\n      const markPosition = findMarkPosition(result.mark, result.node, view.state.doc, position.before(), position.after())\n      const from = markPosition.start\n      const to = markPosition.end\n      linkPreviewTooltipView.show(result.mark, from, to, posToDOMRect(view, from, to))\n      return\n    }\n\n    linkPreviewTooltipView.hide()\n  }, DELAY)\n\n  const onMouseLeave = () => {\n    setTimeout(() => {\n      linkPreviewTooltipView?.hide()\n    }, DELAY)\n  }\n\n  ctx.set(linkPreviewTooltip.key, {\n    props: {\n      handleDOMEvents: {\n        mousemove: onMouseMove,\n        mouseleave: onMouseLeave,\n      },\n    },\n    view: (view) => {\n      linkPreviewTooltipView = new LinkPreviewTooltip(ctx, view)\n      return linkPreviewTooltipView\n    },\n  })\n}\n", "import type { Component } from 'atomico'\nimport { c, html, useEffect, useRef, useState } from 'atomico'\nimport clsx from 'clsx'\nimport type { LinkTooltipConfig } from '../slices'\n\nexport interface LinkEditProps {\n  config: LinkTooltipConfig\n  src: string\n  onConfirm: (href: string) => void\n  onCancel: () => void\n}\n\nexport const linkEditComponent: Component<LinkEditProps> = ({\n  src,\n  onConfirm,\n  onCancel,\n  config,\n}) => {\n  const linkInput = useRef<HTMLInputElement>()\n  const [link, setLink] = useState(src)\n\n  useEffect(() => {\n    setLink(src ?? '')\n  }, [src])\n\n  const onConfirmEdit = () => {\n    onConfirm?.(linkInput.current?.value ?? '')\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    e.stopPropagation()\n    if (e.key === 'Enter') {\n      onConfirm?.(linkInput.current?.value ?? '')\n      e.preventDefault()\n    }\n    if (e.key === 'Escape') {\n      onCancel?.()\n      e.preventDefault()\n    }\n  }\n\n  return html`\n    <host>\n      <div class=\"link-edit\">\n        <input\n          class=\"input-area\"\n          placeholder=${config?.inputPlaceholder}\n          ref=${linkInput}\n          onkeydown=${onKeydown}\n          oninput=${(e: InputEvent) => setLink((e.target as HTMLInputElement).value)}\n          value=${link}\n        />\n        <span class=${clsx('button confirm', !link && 'hidden')} onclick=${onConfirmEdit}>\n          ${config?.confirmButton()}\n        </span>\n      </div>\n    </host>\n  `\n}\n\nlinkEditComponent.props = {\n  config: Object,\n  src: String,\n  onConfirm: Function,\n  onCancel: Function,\n}\n\nexport const LinkEditElement = c(linkEditComponent)\n", "import type { Ctx } from '@milkdown/ctx'\nimport { TextSelection } from '@milkdown/prose/state'\nimport type { PluginView } from '@milkdown/prose/state'\nimport type { Mark } from '@milkdown/prose/model'\nimport type { EditorView } from '@milkdown/prose/view'\nimport { TooltipProvider } from '@milkdown/plugin-tooltip'\nimport { editorViewCtx } from '@milkdown/core'\nimport { linkSchema } from '@milkdown/preset-commonmark'\nimport { posToDOMRect } from '@milkdown/prose'\nimport { linkTooltipConfig, linkTooltipState } from '../slices'\nimport { LinkEditElement } from './edit-component'\n\ninterface Data {\n  from: number\n  to: number\n  mark: Mark | null\n}\n\nconst defaultData: Data = {\n  from: -1,\n  to: -1,\n  mark: null,\n}\n\nexport class LinkEditTooltip implements PluginView {\n  #content = new LinkEditElement()\n  #provider: TooltipProvider\n  #data: Data = { ...defaultData }\n\n  constructor(readonly ctx: Ctx, view: EditorView) {\n    this.#provider = new TooltipProvider({\n      content: this.#content,\n      debounce: 0,\n      shouldShow: () => false,\n    })\n    this.#provider.onHide = () => {\n      this.#content.update().catch((e) => {\n        throw e\n      })\n      view.dom.focus({ preventScroll: true })\n    }\n    this.#provider.update(view)\n    this.#content.onConfirm = this.#confirmEdit\n    this.#content.onCancel = this.#reset\n  }\n\n  #reset = () => {\n    this.#provider.hide()\n    this.ctx.update(linkTooltipState.key, state => ({\n      ...state,\n      mode: 'preview' as const,\n    }))\n    this.#data = { ...defaultData }\n  }\n\n  #confirmEdit = (href: string) => {\n    const view = this.ctx.get(editorViewCtx)\n    const { from, to, mark } = this.#data\n    const type = linkSchema.type(this.ctx)\n    if (mark && mark.attrs.href === href) {\n      this.#reset()\n      return\n    }\n\n    const tr = view.state.tr\n    if (mark)\n      tr.removeMark(from, to, mark)\n\n    tr.addMark(from, to, type.create({ href }))\n    view.dispatch(tr)\n\n    this.#reset()\n  }\n\n  #enterEditMode = (value: string, from: number, to: number) => {\n    const config = this.ctx.get(linkTooltipConfig.key)\n    this.#content.config = config\n    this.#content.src = value\n    this.ctx.update(linkTooltipState.key, state => ({\n      ...state,\n      mode: 'edit' as const,\n    }))\n    const view = this.ctx.get(editorViewCtx)\n    // this.#setRect(posToDOMRect(view, from, to))\n    view.dispatch(view.state.tr.setSelection(TextSelection.create(view.state.doc, from, to)))\n    this.#provider.show({\n      getBoundingClientRect: () => posToDOMRect(view, from, to),\n    })\n    requestAnimationFrame(() => {\n      this.#content.querySelector('input')?.focus()\n    })\n  }\n\n  update = (view: EditorView) => {\n    const { state } = view\n    const { selection } = state\n    if (!(selection instanceof TextSelection))\n      return\n    const { from, to } = selection\n    if (from === this.#data.from && to === this.#data.to)\n      return\n\n    this.#reset()\n  }\n\n  destroy = () => {\n    this.#provider.destroy()\n    this.#content.remove()\n  }\n\n  addLink = (from: number, to: number) => {\n    this.#data = {\n      from,\n      to,\n      mark: null,\n    }\n    this.#enterEditMode('', from, to)\n  }\n\n  editLink = (mark: Mark, from: number, to: number) => {\n    this.#data = {\n      from,\n      to,\n      mark,\n    }\n    this.#enterEditMode(mark.attrs.href, from, to)\n  }\n\n  removeLink = (from: number, to: number) => {\n    const view = this.ctx.get(editorViewCtx)\n\n    const tr = view.state.tr\n    tr.removeMark(from, to, linkSchema.type(this.ctx))\n    view.dispatch(tr)\n\n    this.#reset()\n  }\n}\n", "import type { Ctx } from '@milkdown/ctx'\nimport { linkTooltipAPI } from '../slices'\nimport { linkEditTooltip } from '../tooltips'\nimport { defIfNotExists } from '../../__internal__/helper'\nimport { LinkEditElement } from './edit-component'\nimport { LinkEditTooltip } from './edit-view'\n\ndefIfNotExists('milkdown-link-edit', LinkEditElement)\nexport function configureLinkEditTooltip(ctx: Ctx) {\n  let linkEditTooltipView: LinkEditTooltip | null\n\n  ctx.update(linkTooltipAPI.key, api => ({\n    ...api,\n    addLink: (from, to) => {\n      linkEditTooltipView?.addLink(from, to)\n    },\n    editLink: (mark, from, to) => {\n      linkEditTooltipView?.editLink(mark, from, to)\n    },\n    removeLink: (from, to) => {\n      linkEditTooltipView?.removeLink(from, to)\n    },\n  }))\n\n  ctx.set(linkEditTooltip.key, {\n    view: (view) => {\n      linkEditTooltipView = new LinkEditTooltip(ctx, view)\n      return linkEditTooltipView\n    },\n  })\n}\n", "import type { Ctx } from '@milkdown/ctx'\nimport { configureLinkPreviewTooltip } from './preview/preview-configure'\nimport { configureLinkEditTooltip } from './edit/edit-configure'\n\nexport function configureLinkTooltip(ctx: Ctx) {\n  configureLinkPreviewTooltip(ctx)\n  configureLinkEditTooltip(ctx)\n}\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { linkTooltipAPI, linkTooltipConfig, linkTooltipState } from './slices'\nimport { linkEditTooltip, linkPreviewTooltip } from './tooltips'\n\nexport * from './slices'\nexport * from './configure'\nexport * from './tooltips'\n\nexport const linkTooltipPlugin: MilkdownPlugin[] = [linkTooltipState, linkTooltipAPI, linkTooltipConfig, linkPreviewTooltip, linkEditTooltip].flat()\n"],
  "mappings": "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",
  "names": ["TooltipProvider", "options", "__privateAdd", "__shouldShow", "_debounce", "_shouldShow", "_initialized", "_offset", "_onUpdate", "__privateSet", "view", "prevState", "state", "composing", "selection", "doc", "ranges", "from", "range", "to", "isSame", "__privateGet", "_a", "computePosition", "posToDOMRect", "flip", "offset", "x", "y", "debounce", "virtualElement", "__privateMethod", "_shouldShow_fn", "empty", "isEmptyTextBlock", "TextSelection", "isTooltipChildren", "notHasFocus", "isReadonly", "tooltipFactory", "id", "tooltipSpec", "$ctx", "tooltipPlugin", "$prose", "ctx", "spec", "Plugin", "PluginKey", "result", "__spreadValues", "n", "mark", "e", "_content", "_provider", "__privateAdd", "__privateGet", "__privateSet", "debounce", "__spreadProps", "view"]
}
