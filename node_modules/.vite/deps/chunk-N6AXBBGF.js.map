{
  "version": 3,
  "sources": ["../../@milkdown/components/src/__internal__/meta.ts", "../../@milkdown/components/src/image-block/schema.ts", "../../@milkdown/components/src/image-block/remark-plugin.ts", "../../@milkdown/components/src/image-block/config.ts", "../../@milkdown/components/src/__internal__/helper.ts", "../../@milkdown/components/src/image-block/view/event.ts", "../../@milkdown/components/src/image-block/view/component.ts", "../../@milkdown/components/src/image-block/view/index.ts", "../../@milkdown/components/src/image-block/index.ts"],
  "sourcesContent": ["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(plugin: T, meta: Partial<Meta> & Pick<Meta, 'displayName'>): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n", "import { $nodeSchema } from '@milkdown/utils'\nimport { expectDomTypeError } from '@milkdown/exception'\nimport { withMeta } from '../__internal__/meta'\n\nexport const IMAGE_DATA_TYPE = 'image-block'\n\nexport const imageBlockSchema = $nodeSchema('image-block', () => {\n  return {\n    inline: false,\n    group: 'block',\n    selectable: true,\n    draggable: true,\n    isolating: true,\n    marks: '',\n    atom: true,\n    priority: 100,\n    attrs: {\n      src: { default: '' },\n      caption: { default: '' },\n      ratio: { default: 1 },\n    },\n    parseDOM: [\n      {\n        tag: `img[data-type=\"${IMAGE_DATA_TYPE}\"]`,\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement))\n            throw expectDomTypeError(dom)\n\n          return {\n            src: dom.getAttribute('src') || '',\n            caption: dom.getAttribute('caption') || '',\n            ratio: Number(dom.getAttribute('ratio') ?? 1),\n          }\n        },\n      },\n    ],\n    toDOM: node =>\n      ['img', { 'data-type': IMAGE_DATA_TYPE, ...node.attrs }],\n    parseMarkdown: {\n      match: ({ type }) => type === 'image-block',\n      runner: (state, node, type) => {\n        const src = node.url as string\n        const caption = (node.title) as string\n        let ratio = Number(node.alt as string || 1)\n        if (Number.isNaN(ratio) || ratio === 0)\n          ratio = 1\n\n        state.addNode(type, {\n          src,\n          caption,\n          ratio,\n        })\n      },\n    },\n    toMarkdown: {\n      match: node => node.type.name === 'image-block',\n      runner: (state, node) => {\n        state.openNode('paragraph')\n        state.addNode('image', undefined, undefined, {\n          title: node.attrs.caption,\n          url: node.attrs.src,\n          alt: `${Number.parseFloat(node.attrs.ratio).toFixed(2)}`,\n        })\n        state.closeNode()\n      },\n    },\n  }\n})\n\nwithMeta(imageBlockSchema.node, {\n  displayName: 'NodeSchema<image-block>',\n  group: 'ImageBlock',\n})\n", "import type { Node } from '@milkdown/transformer'\nimport { visit } from 'unist-util-visit'\nimport { $remark } from '@milkdown/utils'\nimport { withMeta } from '../__internal__/meta'\n\nfunction visitImage(ast: Node) {\n  return visit(ast, 'paragraph', (node: Node & { children?: Node[] }, index: number, parent: Node & { children: Node[] }) => {\n    if (node.children?.length !== 1)\n      return\n    const firstChild = node.children?.[0]\n    if (!firstChild || firstChild.type !== 'image')\n      return\n\n    const { url, alt, title } = firstChild as Node & { url: string, alt: string, title: string }\n    const newNode = {\n      type: 'image-block',\n      url,\n      alt,\n      title,\n    }\n\n    parent.children.splice(index, 1, newNode)\n  })\n}\n\nexport const remarkImageBlockPlugin = $remark('remark-image-block', () => () => visitImage)\n\nwithMeta(remarkImageBlockPlugin.plugin, {\n  displayName: 'Remark<remarkImageBlock>',\n  group: 'ImageBlock',\n})\n\nwithMeta(remarkImageBlockPlugin.options, {\n  displayName: 'RemarkConfig<remarkImageBlock>',\n  group: 'ImageBlock',\n})\n", "import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface ImageBlockConfig {\n  imageIcon: () => ReturnType<typeof html> | string | HTMLElement\n  captionIcon: () => ReturnType<typeof html> | string | HTMLElement\n  uploadButton: () => ReturnType<typeof html> | string | HTMLElement\n  confirmButton: () => ReturnType<typeof html> | string | HTMLElement\n  uploadPlaceholderText: string\n  captionPlaceholderText: string\n  onUpload: (file: File) => Promise<string>\n}\n\nexport const defaultImageBlockConfig: ImageBlockConfig = {\n  imageIcon: () => '🌌',\n  captionIcon: () => '💬',\n  uploadButton: () => html`Upload file`,\n  confirmButton: () => html`Confirm ⏎`,\n  uploadPlaceholderText: 'or paste the image link ...',\n  captionPlaceholderText: 'Image caption',\n  onUpload: file => Promise.resolve(URL.createObjectURL(file)),\n}\n\nexport const imageBlockConfig = $ctx(defaultImageBlockConfig, 'imageBlockConfigCtx')\n\nwithMeta(imageBlockConfig, {\n  displayName: 'Config<image-block>',\n  group: 'ImageBlock',\n})\n", "export function defIfNotExists(tagName: string, element: CustomElementConstructor) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element)\n    return\n\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n", "import { type Ref, useEffect, useHost, useMemo } from 'atomico'\n\ninterface Options {\n  image: Ref<HTMLImageElement>\n  resizeHandle: Ref<HTMLDivElement>\n  ratio: number\n  setRatio: (ratio: number) => void\n  src: string\n}\n\nexport function useBlockEffect({\n  image,\n  resizeHandle,\n  ratio,\n  setRatio,\n  src,\n}: Options) {\n  const host = useHost()\n  const root = useMemo(() => host.current.getRootNode() as HTMLElement, [host])\n\n  useEffect(() => {\n    const imageRef = image.current\n    if (!imageRef)\n      return\n\n    delete imageRef.dataset.origin\n    delete imageRef.dataset.height\n    imageRef.style.height = ''\n  }, [src])\n\n  useEffect(() => {\n    const resizeHandleRef = resizeHandle.current\n    const imageRef = image.current\n    if (!resizeHandleRef || !imageRef)\n      return\n    const onMove = (e: PointerEvent) => {\n      e.preventDefault()\n      const top = imageRef.getBoundingClientRect().top\n      const height = e.clientY - top\n      const h = Number(height < 100 ? 100 : height).toFixed(2)\n      imageRef.dataset.height = h\n      imageRef.style.height = `${h}px`\n    }\n    const pointerUp = () => {\n      root.removeEventListener('pointermove', onMove)\n      root.removeEventListener('pointerup', pointerUp)\n      const originHeight = Number(imageRef.dataset.origin)\n      const currentHeight = Number(imageRef.dataset.height)\n      const ratio = Number.parseFloat(Number(currentHeight / originHeight).toFixed(2))\n      if (Number.isNaN(ratio))\n        return\n\n      setRatio(ratio)\n    }\n\n    const pointerDown = (e: PointerEvent) => {\n      e.preventDefault()\n      root.addEventListener('pointermove', onMove)\n      root.addEventListener('pointerup', pointerUp)\n    }\n\n    const onLoad = (e: Event) => {\n      const maxWidth = host.current.getBoundingClientRect().width\n      if (!maxWidth)\n        return\n\n      const target = e.target as HTMLImageElement\n      const height = target.height\n      const width = target.width\n      const transformedHeight = width < maxWidth ? height : maxWidth * (height / width)\n      const h = (transformedHeight * ratio).toFixed(2)\n      imageRef.dataset.origin = transformedHeight.toFixed(2)\n      imageRef.dataset.height = h\n      imageRef.style.height = `${h}px`\n    }\n\n    imageRef.addEventListener('load', onLoad)\n    resizeHandleRef.addEventListener('pointerdown', pointerDown)\n    return () => {\n      imageRef.removeEventListener('load', onLoad)\n      resizeHandleRef.removeEventListener('pointerdown', pointerDown)\n    }\n  }, [])\n}\n", "import type { Component } from 'atomico'\nimport { c, html, useEffect, useRef, useState } from 'atomico'\nimport clsx from 'clsx'\nimport type { ImageBlockConfig } from '../config'\nimport { IMAGE_DATA_TYPE } from '../schema'\nimport { useBlockEffect } from './event'\n\nexport interface Attrs {\n  src: string\n  caption: string\n  ratio: number\n}\n\nexport type ImageComponentProps = Attrs & {\n  config: ImageBlockConfig\n  selected: boolean\n  readonly: boolean\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n}\n\nlet timer: number = 0\n\nexport const imageComponent: Component<ImageComponentProps> = ({\n  src = '',\n  caption = '',\n  ratio = 1,\n  selected = false,\n  readonly = false,\n  setAttr,\n  config,\n}) => {\n  const image = useRef<HTMLImageElement>()\n  const resizeHandle = useRef<HTMLDivElement>()\n  const linkInput = useRef<HTMLInputElement>()\n  const [showCaption, setShowCaption] = useState(caption.length > 0)\n  const [hidePlaceholder, setHidePlaceholder] = useState(src.length !== 0)\n  const [uuid] = useState(crypto.randomUUID())\n  const [focusLinkInput, setFocusLinkInput] = useState(false)\n  const [currentLink, setCurrentLink] = useState(src)\n\n  useBlockEffect({\n    image,\n    resizeHandle,\n    ratio,\n    setRatio: r => setAttr?.('ratio', r),\n    src,\n  })\n\n  useEffect(() => {\n    if (selected)\n      return\n\n    setShowCaption(caption.length > 0)\n  }, [selected])\n\n  const onInput = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    if (timer)\n      window.clearTimeout(timer)\n\n    timer = window.setTimeout(() => {\n      setAttr?.('caption', value)\n    }, 1000)\n  }\n\n  const onBlurCaption = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    if (timer) {\n      window.clearTimeout(timer)\n      timer = 0\n    }\n\n    setAttr?.('caption', value)\n  }\n\n  const onEditLink = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    setHidePlaceholder(value.length !== 0)\n    setCurrentLink(value)\n  }\n\n  const onUpload = async (e: InputEvent) => {\n    const file = (e.target as HTMLInputElement).files?.[0]\n    if (!file)\n      return\n\n    const url = await config?.onUpload(file)\n    if (!url)\n      return\n\n    setAttr?.('src', url)\n    setHidePlaceholder(true)\n  }\n\n  const onToggleCaption = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (readonly)\n      return\n    setShowCaption(x => !x)\n  }\n\n  const onConfirmLinkInput = () => {\n    setAttr?.('src', linkInput.current?.value ?? '')\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter')\n      onConfirmLinkInput()\n  }\n\n  const preventDrag = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  const onClickUploader = (e: PointerEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n  }\n\n  return html`<host class=${clsx(selected && 'selected')}>\n    <div class=${clsx('image-edit', src.length > 0 && 'hidden')}>\n      <div class=\"image-icon\">\n        ${config?.imageIcon()}\n      </div>\n      <div class=${clsx('link-importer', focusLinkInput && 'focus')}>\n        <input\n          ref=${linkInput}\n          draggable=\"true\"\n          ondragstart=${preventDrag}\n          disabled=${readonly}\n          class=\"link-input-area\"\n          value=${currentLink}\n          oninput=${onEditLink}\n          onkeydown=${onKeydown}\n          onfocus=${() => setFocusLinkInput(true)}\n          onblur=${() => setFocusLinkInput(false)}\n        />\n        <div class=${clsx('placeholder', hidePlaceholder && 'hidden')}>\n          <input disabled=${readonly} class=\"hidden\" id=${uuid} type=\"file\" accept=\"image/*\" onchange=${onUpload} />\n          <label onpointerdown=${onClickUploader} class=\"uploader\" for=${uuid}>\n            ${config?.uploadButton()}\n          </label>\n          <span class=\"text\" onclick=${() => linkInput.current?.focus()}>\n            ${config?.uploadPlaceholderText}\n          </span>\n        </div>\n      </div>\n      <div\n        class=${clsx('confirm', currentLink.length === 0 && 'hidden')}\n        onclick=${() => onConfirmLinkInput()}\n      >\n        ${config?.confirmButton()}\n      </div>\n    </div>\n    <div class=${clsx('image-wrapper', src.length === 0 && 'hidden')}>\n      <div class=\"operation\">\n        <div class=\"operation-item\" onpointerdown=${onToggleCaption}>${config?.captionIcon()}</div>\n      </div>\n      <img ref=${image} data-type=${IMAGE_DATA_TYPE} src=${src} alt=${caption} ratio=${ratio} />\n      <div ref=${resizeHandle} class=\"image-resize-handle\"></div>\n    </div>\n    <input\n      draggable=\"true\"\n      ondragstart=${preventDrag}\n      class=${clsx('caption-input', !showCaption && 'hidden')}\n      placeholder=${config?.captionPlaceholderText}\n      oninput=${onInput}\n      onblur=${onBlurCaption}\n      value=${caption}\n    />\n  </host>`\n}\n\nimageComponent.props = {\n  src: String,\n  caption: String,\n  ratio: Number,\n  selected: Boolean,\n  readonly: Boolean,\n  setAttr: Function,\n  config: Object,\n}\n\nexport const ImageElement = c(imageComponent)\n", "import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport type { Node } from '@milkdown/prose/model'\nimport { imageBlockSchema } from '../schema'\nimport { imageBlockConfig } from '../config'\nimport { withMeta } from '../../__internal__/meta'\nimport { defIfNotExists } from '../../__internal__/helper'\nimport type { ImageComponentProps } from './component'\nimport { ImageElement } from './component'\n\ndefIfNotExists('milkdown-image-block', ImageElement)\nexport const imageBlockView = $view(imageBlockSchema.node, (ctx): NodeViewConstructor => {\n  return (initialNode, view, getPos) => {\n    const dom = document.createElement('milkdown-image-block') as HTMLElement & ImageComponentProps\n    const config = ctx.get(imageBlockConfig.key)\n    const bindAttrs = (node: Node) => {\n      dom.src = node.attrs.src\n      dom.ratio = node.attrs.ratio\n      dom.caption = node.attrs.caption\n\n      dom.readonly = !view.editable\n    }\n\n    bindAttrs(initialNode)\n    dom.selected = false\n    dom.setAttr = (attr, value) => {\n      const pos = getPos()\n      if (pos == null)\n        return\n\n      view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n    }\n    dom.config = config\n    return {\n      dom,\n      update: (updatedNode) => {\n        if (updatedNode.type !== initialNode.type)\n          return false\n\n        bindAttrs(updatedNode)\n        return true\n      },\n      stopEvent: (e) => {\n        if (e.target instanceof HTMLInputElement)\n          return true\n\n        return false\n      },\n      selectNode: () => {\n        dom.selected = true\n      },\n      deselectNode: () => {\n        dom.selected = false\n      },\n      destroy: () => {\n        dom.remove()\n      },\n    }\n  }\n})\n\nwithMeta(imageBlockView, {\n  displayName: 'NodeView<image-block>',\n  group: 'ImageBlock',\n})\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { imageBlockSchema } from './schema'\nimport { remarkImageBlockPlugin } from './remark-plugin'\nimport { imageBlockView } from './view'\nimport { imageBlockConfig } from './config'\n\nexport * from './schema'\nexport * from './remark-plugin'\nexport * from './config'\nexport * from './view'\n\nexport const imageBlockComponent: MilkdownPlugin[] = [\n  remarkImageBlockPlugin,\n  imageBlockSchema,\n  imageBlockView,\n  imageBlockConfig,\n].flat()\n"],
  "mappings": "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",
  "names": ["__spreadValues", "h", "ratio"]
}
