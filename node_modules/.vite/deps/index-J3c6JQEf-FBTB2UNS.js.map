{
  "version": 3,
  "sources": ["../../@milkdown/components/src/__internal__/meta.ts", "../../@milkdown/components/src/__internal__/helper.ts", "../../@milkdown/components/src/list-item-block/component.ts", "../../@milkdown/components/src/list-item-block/config.ts", "../../@milkdown/components/src/list-item-block/view.ts", "../../@milkdown/components/src/list-item-block/index.ts", "../../@milkdown/crepe/src/feature/list-item/index.ts"],
  "sourcesContent": ["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(plugin: T, meta: Partial<Meta> & Pick<Meta, 'displayName'>): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n", "export function defIfNotExists(tagName: string, element: CustomElementConstructor) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element)\n    return\n\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n", "import type { Component } from 'atomico'\nimport { c, html, useHost, useLayoutEffect, useRef } from 'atomico'\nimport type { ListItemBlockConfig } from './config'\n\ninterface Attrs {\n  label: string\n  checked: boolean\n  listType: string\n}\n\nexport type ListItemComponentProps = Attrs & {\n  config: ListItemBlockConfig\n  readonly: boolean\n  selected: boolean\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n  onMount: () => void\n}\n\nexport const listItemComponent: Component<ListItemComponentProps> = ({\n  selected,\n  label = '',\n  listType = '',\n  checked,\n  onMount,\n  setAttr,\n  config,\n  readonly,\n}) => {\n  const host = useHost()\n  const contentWrapperRef = useRef<HTMLDivElement>()\n\n  useLayoutEffect(() => {\n    const current = contentWrapperRef.current\n    if (!current)\n      return\n\n    const contentDOM = host.current.querySelector('[data-content-dom]')\n\n    if (contentDOM) {\n      current.appendChild(contentDOM)\n      onMount?.()\n    }\n  }, [])\n\n  const onClickLabel = () => {\n    if (checked == null)\n      return\n\n    setAttr?.('checked', !checked)\n  }\n\n  const labelProps = {\n    label,\n    listType,\n    checked,\n    readonly,\n  }\n\n  return html`<host class=${selected && 'ProseMirror-selectednode'}>\n    <li class='list-item'>\n      <div class=\"label-wrapper\" onclick=${onClickLabel} contenteditable=\"false\">\n        ${config?.renderLabel(labelProps)}\n      </div>\n      <div class=\"children\" ref=${contentWrapperRef}></div>\n    </li>\n  </host>`\n}\n\nlistItemComponent.props = {\n  label: String,\n  checked: Boolean,\n  readonly: Boolean,\n  listType: String,\n  config: Object,\n  selected: Boolean,\n  setAttr: Function,\n  onMount: Function,\n}\n\nexport const ListItemElement = c(listItemComponent)\n", "import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\ninterface RenderLabelProps {\n  label: string\n  listType: string\n  readonly?: boolean\n  checked?: boolean\n}\n\nexport interface ListItemBlockConfig {\n  renderLabel: (props: RenderLabelProps) => void\n}\n\nexport const defaultListItemBlockConfig: ListItemBlockConfig = {\n  renderLabel: ({ label, listType, checked, readonly }: RenderLabelProps) => {\n    if (checked == null)\n      return html`<span class='label'>${listType === 'bullet' ? 'â¦¿' : label}</span>`\n\n    return html`<input disabled=${readonly} class='label' type=\"checkbox\" checked=${checked} />`\n  },\n}\n\nexport const listItemBlockConfig = $ctx(defaultListItemBlockConfig, 'listItemBlockConfigCtx')\n\nwithMeta(listItemBlockConfig, {\n  displayName: 'Config<list-item-block>',\n  group: 'ListItemBlock',\n})\n", "import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport { TextSelection } from '@milkdown/prose/state'\nimport type { Node } from '@milkdown/prose/model'\nimport { listItemSchema } from '@milkdown/preset-commonmark'\nimport { withMeta } from '../__internal__/meta'\nimport { defIfNotExists } from '../__internal__/helper'\nimport type { ListItemComponentProps } from './component'\nimport { ListItemElement } from './component'\nimport { listItemBlockConfig } from './config'\n\ndefIfNotExists('milkdown-list-item-block', ListItemElement)\nexport const listItemBlockView = $view(listItemSchema.node, (ctx): NodeViewConstructor => {\n  return (initialNode, view, getPos) => {\n    const dom = document.createElement('milkdown-list-item-block') as HTMLElement & ListItemComponentProps\n    const contentDOM = document.createElement('div')\n    contentDOM.setAttribute('data-content-dom', 'true')\n    contentDOM.classList.add('content-dom')\n    const config = ctx.get(listItemBlockConfig.key)\n    const bindAttrs = (node: Node) => {\n      dom.listType = node.attrs.listType\n      dom.label = node.attrs.label\n      dom.checked = node.attrs.checked\n\n      dom.readonly = !view.editable\n    }\n\n    bindAttrs(initialNode)\n    dom.appendChild(contentDOM)\n    dom.selected = false\n    dom.setAttr = (attr, value) => {\n      const pos = getPos()\n      if (pos == null)\n        return\n\n      view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n    }\n    dom.onMount = () => {\n      const pos = getPos() ?? 0\n      const end = pos + initialNode.nodeSize\n      const { from, to } = view.state.selection\n      if (view.hasFocus() && pos < from && to < end) {\n        Promise.resolve().then(() => {\n          const p = view.state.doc.resolve(pos)\n          view.dispatch(view.state.tr.setSelection(TextSelection.near(p, 1)))\n        })\n      }\n    }\n    let node = initialNode\n    dom.config = config\n    return {\n      dom,\n      contentDOM,\n      update: (updatedNode) => {\n        if (updatedNode.type !== initialNode.type)\n          return false\n\n        if (updatedNode.sameMarkup(node) && updatedNode.content.eq(node.content))\n          return false\n\n        node = updatedNode\n        bindAttrs(updatedNode)\n        return true\n      },\n      ignoreMutation: (mutation) => {\n        if (!dom || !contentDOM)\n          return true\n\n        if ((mutation.type as unknown) === 'selection')\n          return false\n\n        if (contentDOM === mutation.target && mutation.type === 'attributes')\n          return true\n\n        if (contentDOM.contains(mutation.target))\n          return false\n\n        return true\n      },\n      selectNode: () => {\n        dom.selected = true\n      },\n      deselectNode: () => {\n        dom.selected = false\n      },\n      destroy: () => {\n        dom.remove()\n        contentDOM.remove()\n      },\n    }\n  }\n})\n\nwithMeta(listItemBlockView, {\n  displayName: 'NodeView<list-item-block>',\n  group: 'ListItemBlock',\n})\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { listItemBlockView } from './view'\nimport { listItemBlockConfig } from './config'\n\nexport * from './component'\nexport * from './config'\nexport * from './view'\n\nexport const listItemBlockComponent: MilkdownPlugin[] = [\n  listItemBlockConfig,\n  listItemBlockView,\n]\n", "import type { Ctx } from '@milkdown/kit/ctx'\nimport { listItemBlockComponent, listItemBlockConfig } from '@milkdown/kit/component/list-item-block'\nimport { html } from 'atomico'\nimport clsx from 'clsx'\nimport type { DefineFeature, Icon } from '../shared'\nimport { bulletIcon, checkBoxCheckedIcon, checkBoxUncheckedIcon } from '../../icons'\n\nexport interface ListItemConfig {\n  bulletIcon: Icon\n  checkBoxCheckedIcon: Icon\n  checkBoxUncheckedIcon: Icon\n}\n\nexport type ListItemFeatureConfig = Partial<ListItemConfig>\n\nfunction configureListItem(ctx: Ctx, config?: ListItemFeatureConfig) {\n  ctx.set(listItemBlockConfig.key, {\n    renderLabel: ({ label, listType, checked, readonly }) => {\n      if (checked == null) {\n        if (listType === 'bullet')\n          return html`<span class='label'>${config?.bulletIcon?.() ?? bulletIcon}</span>`\n\n        return html`<span class='label'>${label}</span>`\n      }\n\n      if (checked)\n        return html`<span class=${clsx('label checkbox', readonly && 'readonly')}>${config?.checkBoxCheckedIcon?.() ?? checkBoxCheckedIcon}</span>`\n\n      return html`<span class=${clsx('label checkbox', readonly && 'readonly')}>${config?.checkBoxUncheckedIcon?.() ?? checkBoxUncheckedIcon}</span>`\n    },\n  })\n}\n\nexport const defineFeature: DefineFeature<ListItemFeatureConfig> = (editor, config) => {\n  editor\n    .config(ctx => configureListItem(ctx, config))\n    .use(listItemBlockComponent)\n}\n"],
  "mappings": "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",
  "names": ["node"]
}
