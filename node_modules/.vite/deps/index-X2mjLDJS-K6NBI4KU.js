import {
  imageBlockComponent,
  imageBlockConfig
} from "./chunk-N6AXBBGF.js";
import {
  c,
  captionIcon,
  clsx_default,
  confirmIcon,
  html,
  imageIcon,
  useRef,
  useState
} from "./chunk-457NNR5L.js";
import {
  v
} from "./chunk-AMUWVZB5.js";
import {
  h,
  le
} from "./chunk-GFK4PW34.js";
import "./chunk-AP6IPAVY.js";
import "./chunk-DP4XHQAG.js";

// node_modules/@milkdown/components/lib/image-inline/index.es.js
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
function withMeta(plugin, meta) {
  Object.assign(plugin, {
    meta: __spreadValues({
      package: "@milkdown/components"
    }, meta)
  });
  return plugin;
}
var defaultInlineImageConfig = {
  imageIcon: () => "🌌",
  uploadButton: () => html`Upload`,
  confirmButton: () => html`⏎`,
  uploadPlaceholderText: "/Paste",
  onUpload: (file) => Promise.resolve(URL.createObjectURL(file))
};
var inlineImageConfig = h(defaultInlineImageConfig, "inlineImageConfigCtx");
withMeta(inlineImageConfig, {
  displayName: "Config<image-inline>",
  group: "ImageInline"
});
function defIfNotExists(tagName, element) {
  const current = customElements.get(tagName);
  if (current == null) {
    customElements.define(tagName, element);
    return;
  }
  if (current === element)
    return;
  console.warn(`Custom element ${tagName} has been defined before.`);
}
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var inlineImageComponent = ({
  src = "",
  selected = false,
  alt,
  title,
  setAttr,
  config
}) => {
  const linkInput = useRef();
  const [uuid] = useState(crypto.randomUUID());
  const [focusLinkInput, setFocusLinkInput] = useState(false);
  const [hidePlaceholder, setHidePlaceholder] = useState(src.length !== 0);
  const [currentLink, setCurrentLink] = useState(src);
  const onEditLink = (e) => {
    const target = e.target;
    const value = target.value;
    setHidePlaceholder(value.length !== 0);
    setCurrentLink(value);
  };
  const onUpload = (e) => __async(void 0, null, function* () {
    var _a;
    const file = (_a = e.target.files) == null ? void 0 : _a[0];
    if (!file)
      return;
    const url = yield config == null ? void 0 : config.onUpload(file);
    if (!url)
      return;
    setAttr == null ? void 0 : setAttr("src", url);
    setHidePlaceholder(true);
  });
  const onConfirmLinkInput = () => {
    var _a, _b;
    setAttr == null ? void 0 : setAttr("src", (_b = (_a = linkInput.current) == null ? void 0 : _a.value) != null ? _b : "");
  };
  const onKeydown = (e) => {
    if (e.key === "Enter")
      onConfirmLinkInput();
  };
  const preventDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };
  const onClickUploader = (e) => {
    e.stopPropagation();
    e.preventDefault();
  };
  return html`<host class=${clsx_default(selected && "selected", !src && "empty")}>
    ${!src ? html`<div class="empty-image-inline">
        <div class="image-icon">
          ${config == null ? void 0 : config.imageIcon()}
        </div>
        <div class=${clsx_default("link-importer", focusLinkInput && "focus")}>
          <input
            draggable="true"
            ref=${linkInput}
            ondragstart=${preventDrag}
            class="link-input-area"
            value=${currentLink}
            oninput=${onEditLink}
            onkeydown=${onKeydown}
            onfocus=${() => setFocusLinkInput(true)}
            onblur=${() => setFocusLinkInput(false)}
          />
          <div class=${clsx_default("placeholder", hidePlaceholder && "hidden")}>
            <input class="hidden" id=${uuid} type="file" accept="image/*" onchange=${onUpload} />
            <label onpointerdown=${onClickUploader} class="uploader" for=${uuid}>
              ${config == null ? void 0 : config.uploadButton()}
            </label>
            <span class="text" onclick=${() => {
    var _a;
    return (_a = linkInput.current) == null ? void 0 : _a.focus();
  }}>
              ${config == null ? void 0 : config.uploadPlaceholderText}
            </span>
          </div>
        </div>
        <div
          class=${clsx_default("confirm", currentLink.length === 0 && "hidden")}
          onclick=${() => onConfirmLinkInput()}
        >
          ${config == null ? void 0 : config.confirmButton()}
        </div>
      </div>` : html`<img class="image-inline" src=${src} alt=${alt} title=${title} />`}
  </host>`;
};
inlineImageComponent.props = {
  src: String,
  alt: String,
  title: String,
  selected: Boolean,
  setAttr: Function,
  config: Object
};
var InlineImageElement = c(inlineImageComponent);
defIfNotExists("milkdown-image-inline", InlineImageElement);
var inlineImageView = le(v.node, (ctx) => {
  return (initialNode, view, getPos) => {
    const dom = document.createElement("milkdown-image-inline");
    const config = ctx.get(inlineImageConfig.key);
    const bindAttrs = (node) => {
      dom.src = node.attrs.src;
      dom.alt = node.attrs.alt;
      dom.title = node.attrs.title;
    };
    bindAttrs(initialNode);
    dom.selected = false;
    dom.setAttr = (attr, value) => {
      const pos = getPos();
      if (pos == null)
        return;
      view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value));
    };
    dom.config = config;
    return {
      dom,
      update: (updatedNode) => {
        if (updatedNode.type !== initialNode.type)
          return false;
        bindAttrs(updatedNode);
        return true;
      },
      stopEvent: (e) => {
        if (dom.selected && e.target instanceof HTMLInputElement)
          return true;
        return false;
      },
      selectNode: () => {
        dom.selected = true;
      },
      deselectNode: () => {
        dom.selected = false;
      },
      destroy: () => {
        dom.remove();
      }
    };
  };
});
withMeta(inlineImageView, {
  displayName: "NodeView<image-inline>",
  group: "ImageInline"
});
var imageInlineComponent = [
  inlineImageConfig,
  inlineImageView
];

// node_modules/@milkdown/crepe/lib/esm/index-X2mjLDJS.js
var defineFeature = (editor, config) => {
  editor.config((ctx) => {
    ctx.update(inlineImageConfig.key, (value) => {
      var _a, _b, _c, _d, _e, _f;
      return {
        uploadButton: (_a = config == null ? void 0 : config.inlineUploadButton) != null ? _a : () => "Upload",
        imageIcon: (_b = config == null ? void 0 : config.inlineImageIcon) != null ? _b : () => imageIcon,
        confirmButton: (_c = config == null ? void 0 : config.inlineConfirmButton) != null ? _c : () => confirmIcon,
        uploadPlaceholderText: (_d = config == null ? void 0 : config.inlineUploadPlaceholderText) != null ? _d : "or paste link",
        onUpload: (_f = (_e = config == null ? void 0 : config.inlineOnUpload) != null ? _e : config == null ? void 0 : config.onUpload) != null ? _f : value.onUpload
      };
    });
    ctx.update(imageBlockConfig.key, (value) => {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      return {
        uploadButton: (_a = config == null ? void 0 : config.blockUploadButton) != null ? _a : () => "Upload file",
        imageIcon: (_b = config == null ? void 0 : config.blockImageIcon) != null ? _b : () => imageIcon,
        captionIcon: (_c = config == null ? void 0 : config.blockCaptionIcon) != null ? _c : () => captionIcon,
        confirmButton: (_d = config == null ? void 0 : config.blockConfirmButton) != null ? _d : () => "Confirm",
        captionPlaceholderText: (_e = config == null ? void 0 : config.blockCaptionPlaceholderText) != null ? _e : "Write Image Caption",
        uploadPlaceholderText: (_f = config == null ? void 0 : config.blockUploadPlaceholderText) != null ? _f : "or paste link",
        onUpload: (_h = (_g = config == null ? void 0 : config.blockOnUpload) != null ? _g : config == null ? void 0 : config.onUpload) != null ? _h : value.onUpload
      };
    });
  }).use(imageBlockComponent).use(imageInlineComponent);
};
export {
  defineFeature
};
//# sourceMappingURL=index-X2mjLDJS-K6NBI4KU.js.map
