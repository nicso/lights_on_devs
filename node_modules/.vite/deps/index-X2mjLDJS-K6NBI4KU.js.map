{
  "version": 3,
  "sources": ["../../@milkdown/components/src/__internal__/meta.ts", "../../@milkdown/components/src/image-inline/config.ts", "../../@milkdown/components/src/__internal__/helper.ts", "../../@milkdown/components/src/image-inline/component.ts", "../../@milkdown/components/src/image-inline/view.ts", "../../@milkdown/components/src/image-inline/index.ts", "../../@milkdown/crepe/src/feature/image-block/index.ts"],
  "sourcesContent": ["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(plugin: T, meta: Partial<Meta> & Pick<Meta, 'displayName'>): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n", "import { $ctx } from '@milkdown/utils'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface InlineImageConfig {\n  imageIcon: () => ReturnType<typeof html>\n  uploadButton: () => ReturnType<typeof html>\n  confirmButton: () => ReturnType<typeof html>\n  uploadPlaceholderText: string\n  onUpload: (file: File) => Promise<string>\n}\n\nexport const defaultInlineImageConfig: InlineImageConfig = {\n  imageIcon: () => '🌌',\n  uploadButton: () => html`Upload`,\n  confirmButton: () => html`⏎`,\n  uploadPlaceholderText: '/Paste',\n  onUpload: file => Promise.resolve(URL.createObjectURL(file)),\n}\n\nexport const inlineImageConfig = $ctx(defaultInlineImageConfig, 'inlineImageConfigCtx')\n\nwithMeta(inlineImageConfig, {\n  displayName: 'Config<image-inline>',\n  group: 'ImageInline',\n})\n", "export function defIfNotExists(tagName: string, element: CustomElementConstructor) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element)\n    return\n\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n", "import { c, html, useRef, useState } from 'atomico'\nimport type { Component } from 'atomico'\nimport clsx from 'clsx'\nimport type { InlineImageConfig } from './config'\n\nexport interface Attrs {\n  src: string\n  alt: string\n  title: string\n}\n\nexport type InlineImageComponentProps = Attrs & {\n  setAttr: <T extends keyof Attrs>(attr: T, value: Attrs[T]) => void\n  selected: boolean\n  config: InlineImageConfig\n}\n\nexport const inlineImageComponent: Component<InlineImageComponentProps> = ({\n  src = '',\n  selected = false,\n  alt,\n  title,\n  setAttr,\n  config,\n}) => {\n  const linkInput = useRef<HTMLInputElement>()\n  const [uuid] = useState(crypto.randomUUID())\n  const [focusLinkInput, setFocusLinkInput] = useState(false)\n  const [hidePlaceholder, setHidePlaceholder] = useState(src.length !== 0)\n  const [currentLink, setCurrentLink] = useState(src)\n\n  const onEditLink = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    const value = target.value\n    setHidePlaceholder(value.length !== 0)\n    setCurrentLink(value)\n  }\n\n  const onUpload = async (e: InputEvent) => {\n    const file = (e.target as HTMLInputElement).files?.[0]\n    if (!file)\n      return\n\n    const url = await config?.onUpload(file)\n    if (!url)\n      return\n\n    setAttr?.('src', url)\n    setHidePlaceholder(true)\n  }\n\n  const onConfirmLinkInput = () => {\n    setAttr?.('src', linkInput.current?.value ?? '')\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter')\n      onConfirmLinkInput()\n  }\n\n  const preventDrag = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  const onClickUploader = (e: PointerEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n  }\n\n  return html`<host class=${clsx(selected && 'selected', !src && 'empty')}>\n    ${!src\n      ? html`<div class=\"empty-image-inline\">\n        <div class=\"image-icon\">\n          ${config?.imageIcon()}\n        </div>\n        <div class=${clsx('link-importer', focusLinkInput && 'focus')}>\n          <input\n            draggable=\"true\"\n            ref=${linkInput}\n            ondragstart=${preventDrag}\n            class=\"link-input-area\"\n            value=${currentLink}\n            oninput=${onEditLink}\n            onkeydown=${onKeydown}\n            onfocus=${() => setFocusLinkInput(true)}\n            onblur=${() => setFocusLinkInput(false)}\n          />\n          <div class=${clsx('placeholder', hidePlaceholder && 'hidden')}>\n            <input class=\"hidden\" id=${uuid} type=\"file\" accept=\"image/*\" onchange=${onUpload} />\n            <label onpointerdown=${onClickUploader} class=\"uploader\" for=${uuid}>\n              ${config?.uploadButton()}\n            </label>\n            <span class=\"text\" onclick=${() => linkInput.current?.focus()}>\n              ${config?.uploadPlaceholderText}\n            </span>\n          </div>\n        </div>\n        <div\n          class=${clsx('confirm', currentLink.length === 0 && 'hidden')}\n          onclick=${() => onConfirmLinkInput()}\n        >\n          ${config?.confirmButton()}\n        </div>\n      </div>`\n      : html`<img class=\"image-inline\" src=${src} alt=${alt} title=${title} />`\n    }\n  </host>`\n}\n\ninlineImageComponent.props = {\n  src: String,\n  alt: String,\n  title: String,\n  selected: Boolean,\n  setAttr: Function,\n  config: Object,\n}\n\nexport const InlineImageElement = c(inlineImageComponent)\n", "import { $view } from '@milkdown/utils'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport { imageSchema } from '@milkdown/preset-commonmark'\nimport type { Node } from '@milkdown/prose/model'\nimport { withMeta } from '../__internal__/meta'\nimport { defIfNotExists } from '../__internal__/helper'\nimport type { InlineImageComponentProps } from './component'\nimport { InlineImageElement } from './component'\nimport { inlineImageConfig } from './config'\n\ndefIfNotExists('milkdown-image-inline', InlineImageElement)\nexport const inlineImageView = $view(imageSchema.node, (ctx): NodeViewConstructor => {\n  return (initialNode, view, getPos) => {\n    const dom = document.createElement('milkdown-image-inline') as HTMLElement & InlineImageComponentProps\n    const config = ctx.get(inlineImageConfig.key)\n    const bindAttrs = (node: Node) => {\n      dom.src = node.attrs.src\n      dom.alt = node.attrs.alt\n      dom.title = node.attrs.title\n    }\n    bindAttrs(initialNode)\n    dom.selected = false\n    dom.setAttr = (attr, value) => {\n      const pos = getPos()\n      if (pos == null)\n        return\n\n      view.dispatch(view.state.tr.setNodeAttribute(pos, attr, value))\n    }\n    dom.config = config\n    return {\n      dom,\n      update: (updatedNode) => {\n        if (updatedNode.type !== initialNode.type)\n          return false\n\n        bindAttrs(updatedNode)\n        return true\n      },\n      stopEvent: (e) => {\n        if (dom.selected && e.target instanceof HTMLInputElement)\n          return true\n\n        return false\n      },\n      selectNode: () => {\n        dom.selected = true\n      },\n      deselectNode: () => {\n        dom.selected = false\n      },\n      destroy: () => {\n        dom.remove()\n      },\n    }\n  }\n})\n\nwithMeta(inlineImageView, {\n  displayName: 'NodeView<image-inline>',\n  group: 'ImageInline',\n})\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { inlineImageConfig } from './config'\nimport { inlineImageView } from './view'\n\nexport * from './config'\nexport * from './view'\n\nexport const imageInlineComponent: MilkdownPlugin[] = [\n  inlineImageConfig,\n  inlineImageView,\n]\n", "import { imageBlockComponent, imageBlockConfig } from '@milkdown/kit/component/image-block'\nimport { imageInlineComponent, inlineImageConfig } from '@milkdown/kit/component/image-inline'\nimport type { DefineFeature, Icon } from '../shared'\nimport { captionIcon, confirmIcon, imageIcon } from '../../icons'\n\ninterface ImageBlockConfig {\n  onUpload: (file: File) => Promise<string>\n\n  inlineImageIcon: Icon\n  inlineConfirmButton: Icon\n  inlineUploadButton: Icon\n  inlineUploadPlaceholderText: string\n  inlineOnUpload: (file: File) => Promise<string>\n\n  blockImageIcon: Icon\n  blockConfirmButton: Icon\n  blockCaptionIcon: Icon\n  blockUploadButton: Icon\n  blockCaptionPlaceholderText: string\n  blockUploadPlaceholderText: string\n  blockOnUpload: (file: File) => Promise<string>\n}\n\nexport type ImageBlockFeatureConfig = Partial<ImageBlockConfig>\n\nexport const defineFeature: DefineFeature<ImageBlockFeatureConfig> = (editor, config) => {\n  editor\n    .config((ctx) => {\n      ctx.update(inlineImageConfig.key, value => ({\n        uploadButton: config?.inlineUploadButton ?? (() => 'Upload'),\n        imageIcon: config?.inlineImageIcon ?? (() => imageIcon),\n        confirmButton: config?.inlineConfirmButton ?? (() => confirmIcon),\n        uploadPlaceholderText: config?.inlineUploadPlaceholderText ?? 'or paste link',\n        onUpload: config?.inlineOnUpload ?? config?.onUpload ?? value.onUpload,\n      }))\n      ctx.update(imageBlockConfig.key, value => ({\n        uploadButton: config?.blockUploadButton ?? (() => 'Upload file'),\n        imageIcon: config?.blockImageIcon ?? (() => imageIcon),\n        captionIcon: config?.blockCaptionIcon ?? (() => captionIcon),\n        confirmButton: config?.blockConfirmButton ?? (() => 'Confirm'),\n        captionPlaceholderText: config?.blockCaptionPlaceholderText ?? 'Write Image Caption',\n        uploadPlaceholderText: config?.blockUploadPlaceholderText ?? 'or paste link',\n        onUpload: config?.blockOnUpload ?? config?.onUpload ?? value.onUpload,\n      }))\n    })\n    .use(imageBlockComponent)\n    .use(imageInlineComponent)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEgB,SAAA,SAAmC,QAAW,MAAoD;AAChH,SAAO,OAAO,QAAQ;IACpB,MAAM,eAAA;MACJ,SAAS;IAAA,GACN,IAAA;EAAA,CAEN;AAEM,SAAA;AACT;ACCO,IAAM,2BAA8C;EACzD,WAAW,MAAM;EACjB,cAAc,MAAM;EACpB,eAAe,MAAM;EACrB,uBAAuB;EACvB,UAAU,CAAQ,SAAA,QAAQ,QAAQ,IAAI,gBAAgB,IAAI,CAAC;AAC7D;AAEa,IAAA,oBAAoB,EAAK,0BAA0B,sBAAsB;AAEtF,SAAS,mBAAmB;EAC1B,aAAa;EACb,OAAO;AACT,CAAC;ACzBe,SAAA,eAAe,SAAiB,SAAmC;AAC3E,QAAA,UAAU,eAAe,IAAI,OAAO;AAC1C,MAAI,WAAW,MAAM;AACJ,mBAAA,OAAO,SAAS,OAAO;AACtC;EAAA;AAGF,MAAI,YAAY;AACd;AAEM,UAAA,KAAK,kBAAkB,OAAO,2BAA2B;AACnE;;;;;;;;;;;;;;;;;;;;;ACMO,IAAM,uBAA6D,CAAC;EACzE,MAAM;EACN,WAAW;EACX;EACA;EACA;EACA;AACF,MAAM;AACJ,QAAM,YAAY,OAAyB;AAC3C,QAAM,CAAC,IAAI,IAAI,SAAS,OAAO,WAAA,CAAY;AAC3C,QAAM,CAAC,gBAAgB,iBAAiB,IAAI,SAAS,KAAK;AAC1D,QAAM,CAAC,iBAAiB,kBAAkB,IAAI,SAAS,IAAI,WAAW,CAAC;AACvE,QAAM,CAAC,aAAa,cAAc,IAAI,SAAS,GAAG;AAE5C,QAAA,aAAa,CAAC,MAAkB;AACpC,UAAM,SAAS,EAAE;AACjB,UAAM,QAAQ,OAAO;AACF,uBAAA,MAAM,WAAW,CAAC;AACrC,mBAAe,KAAK;EAAA;AAGhB,QAAA,WAAW,CAAO,MAAkB,QAAA,QAAA,MAAA,aAAA;AAtC5C,QAAA;AAuCI,UAAM,QAAQ,KAAA,EAAE,OAA4B,UAA9B,OAAsC,SAAA,GAAA,CAAA;AACpD,QAAI,CAAC;AACH;AAEI,UAAA,MAAM,MAAM,UAAA,OAAA,SAAA,OAAQ,SAAS,IAAA;AACnC,QAAI,CAAC;AACH;AAEF,eAAA,OAAA,SAAA,QAAU,OAAO,GAAA;AACjB,uBAAmB,IAAI;EAAA,CACzB;AAEA,QAAM,qBAAqB,MAAM;AAnDnC,QAAA,IAAA;AAoDI,eAAA,OAAA,SAAA,QAAU,QAAO,MAAA,KAAA,UAAU,YAAV,OAAA,SAAA,GAAmB,UAAnB,OAA4B,KAAA,EAAA;EAAA;AAGzC,QAAA,YAAY,CAAC,MAAqB;AACtC,QAAI,EAAE,QAAQ;AACO,yBAAA;EAAA;AAGjB,QAAA,cAAc,CAAC,MAAa;AAChC,MAAE,eAAe;AACjB,MAAE,gBAAgB;EAAA;AAGd,QAAA,kBAAkB,CAAC,MAAoB;AAC3C,MAAE,gBAAgB;AAClB,MAAE,eAAe;EAAA;AAGnB,SAAO,mBAAmB,aAAK,YAAY,YAAY,CAAC,OAAO,OAAO,CAAC;MACnE,CAAC,MACC;;YAEI,UAAA,OAAA,SAAA,OAAQ,UAAW,CAAA;;qBAEV,aAAK,iBAAiB,kBAAkB,OAAO,CAAC;;;kBAGnD,SAAS;0BACD,WAAW;;oBAEjB,WAAW;sBACT,UAAU;wBACR,SAAS;sBACX,MAAM,kBAAkB,IAAI,CAAC;qBAC9B,MAAM,kBAAkB,KAAK,CAAC;;uBAE5B,aAAK,eAAe,mBAAmB,QAAQ,CAAC;uCAChC,IAAI,0CAA0C,QAAQ;mCAC1D,eAAe,yBAAyB,IAAI;gBAC/D,UAAA,OAAA,SAAA,OAAQ,aAAc,CAAA;;yCAEG,MAAG;AA7F5C,QAAA;AA6F+C,YAAA,KAAA,UAAU,YAAV,OAAmB,SAAA,GAAA,MAAA;EAAA,CAAO;gBACzD,UAAA,OAAA,SAAA,OAAQ,qBAAqB;;;;;kBAK3B,aAAK,WAAW,YAAY,WAAW,KAAK,QAAQ,CAAC;oBACnD,MAAM,mBAAA,CAAoB;;YAElC,UAAA,OAAA,SAAA,OAAQ,cAAe,CAAA;;gBAG3B,qCAAqC,GAAG,QAAQ,GAAG,UAAU,KAAK,KACtE;;AAEJ;AAEA,qBAAqB,QAAQ;EAC3B,KAAK;EACL,KAAK;EACL,OAAO;EACP,UAAU;EACV,SAAS;EACT,QAAQ;AACV;AAEa,IAAA,qBAAqB,EAAE,oBAAoB;AC7GxD,eAAe,yBAAyB,kBAAkB;AACnD,IAAM,kBAAkB,GAAM,EAAY,MAAM,CAAC,QAA6B;AAC5E,SAAA,CAAC,aAAa,MAAM,WAAW;AAC9B,UAAA,MAAM,SAAS,cAAc,uBAAuB;AAC1D,UAAM,SAAS,IAAI,IAAI,kBAAkB,GAAG;AACtC,UAAA,YAAY,CAAC,SAAe;AAC5B,UAAA,MAAM,KAAK,MAAM;AACjB,UAAA,MAAM,KAAK,MAAM;AACjB,UAAA,QAAQ,KAAK,MAAM;IAAA;AAEzB,cAAU,WAAW;AACrB,QAAI,WAAW;AACX,QAAA,UAAU,CAAC,MAAM,UAAU;AAC7B,YAAM,MAAM,OAAO;AACnB,UAAI,OAAO;AACT;AAEG,WAAA,SAAS,KAAK,MAAM,GAAG,iBAAiB,KAAK,MAAM,KAAK,CAAC;IAAA;AAEhE,QAAI,SAAS;AACN,WAAA;MACL;MACA,QAAQ,CAAC,gBAAgB;AACnB,YAAA,YAAY,SAAS,YAAY;AAC5B,iBAAA;AAET,kBAAU,WAAW;AACd,eAAA;MAAA;MAET,WAAW,CAAC,MAAM;AACZ,YAAA,IAAI,YAAY,EAAE,kBAAkB;AAC/B,iBAAA;AAEF,eAAA;MAAA;MAET,YAAY,MAAM;AAChB,YAAI,WAAW;MAAA;MAEjB,cAAc,MAAM;AAClB,YAAI,WAAW;MAAA;MAEjB,SAAS,MAAM;AACb,YAAI,OAAO;MAAA;IACb;EACF;AAEJ,CAAC;AAED,SAAS,iBAAiB;EACxB,aAAa;EACb,OAAO;AACT,CAAC;ACtDM,IAAM,uBAAyC;EACpD;EACA;AACF;;;ACea,IAAA,gBAAwD,CAAC,QAAQ,WAAW;AAEpF,SAAA,OAAO,CAAC,QAAQ;AACX,QAAA,OAAO,kBAAkB,KAAK,CAAM,UAAA;AA5B9C,UAAA,IAAA,IAAA,IAAA,IAAA,IAAA;AA4BkD,aAAA;QAC1C,eAAc,KAAA,UAAA,OAAA,SAAA,OAAQ,uBAAR,OAAA,KAA+B,MAAM;QACnD,YAAW,KAAA,UAAA,OAAA,SAAA,OAAQ,oBAAR,OAAA,KAA4B,MAAM;QAC7C,gBAAe,KAAA,UAAA,OAAA,SAAA,OAAQ,wBAAR,OAAA,KAAgC,MAAM;QACrD,wBAAuB,KAAQ,UAAA,OAAA,SAAA,OAAA,gCAAR,OAAuC,KAAA;QAC9D,WAAU,MAAQ,KAAA,UAAA,OAAA,SAAA,OAAA,mBAAR,OAAA,KAA0B,UAAQ,OAAA,SAAA,OAAA,aAAlC,OAAA,KAA8C,MAAM;MAAA;IAChE,CAAE;AACE,QAAA,OAAO,iBAAiB,KAAK,CAAM,UAAA;AAnC7C,UAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA;AAmCiD,aAAA;QACzC,eAAc,KAAA,UAAA,OAAA,SAAA,OAAQ,sBAAR,OAAA,KAA8B,MAAM;QAClD,YAAW,KAAA,UAAA,OAAA,SAAA,OAAQ,mBAAR,OAAA,KAA2B,MAAM;QAC5C,cAAa,KAAA,UAAA,OAAA,SAAA,OAAQ,qBAAR,OAAA,KAA6B,MAAM;QAChD,gBAAe,KAAA,UAAA,OAAA,SAAA,OAAQ,uBAAR,OAAA,KAA+B,MAAM;QACpD,yBAAwB,KAAQ,UAAA,OAAA,SAAA,OAAA,gCAAR,OAAuC,KAAA;QAC/D,wBAAuB,KAAQ,UAAA,OAAA,SAAA,OAAA,+BAAR,OAAsC,KAAA;QAC7D,WAAU,MAAQ,KAAA,UAAA,OAAA,SAAA,OAAA,kBAAR,OAAA,KAAyB,UAAQ,OAAA,SAAA,OAAA,aAAjC,OAAA,KAA6C,MAAM;MAAA;IAC/D,CAAE;EAAA,CACH,EACA,IAAI,mBAAmB,EACvB,IAAI,oBAAoB;AAC7B;",
  "names": []
}
