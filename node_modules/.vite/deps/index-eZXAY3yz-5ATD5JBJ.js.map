{
  "version": 3,
  "sources": ["../../@milkdown/crepe/src/feature/toolbar/component.ts", "../../@milkdown/crepe/src/feature/toolbar/index.ts"],
  "sourcesContent": ["import type { Component } from 'atomico'\nimport { c, html, useEffect, useUpdate } from 'atomico'\nimport type { Ctx } from '@milkdown/kit/ctx'\nimport { commandsCtx, editorViewCtx } from '@milkdown/kit/core'\nimport {\n  emphasisSchema,\n  inlineCodeSchema,\n  linkSchema,\n  strongSchema,\n  toggleEmphasisCommand,\n  toggleInlineCodeCommand,\n  toggleStrongCommand,\n} from '@milkdown/kit/preset/commonmark'\nimport type { MarkType } from '@milkdown/kit/prose/model'\nimport clsx from 'clsx'\nimport { linkTooltipAPI } from '@milkdown/kit/component/link-tooltip'\nimport { strikethroughSchema, toggleStrikethroughCommand } from '@milkdown/kit/preset/gfm'\nimport { boldIcon, codeIcon, italicIcon, linkIcon, strikethroughIcon } from '../../icons'\nimport type { ToolbarFeatureConfig } from './index'\n\nexport interface ToolbarProps {\n  ctx: Ctx\n  hide: () => void\n  show: boolean\n  config?: ToolbarFeatureConfig\n}\n\nexport const toolbarComponent: Component<ToolbarProps> = ({\n  ctx,\n  hide,\n  show,\n  config,\n}) => {\n  const update = useUpdate()\n  useEffect(() => {\n    update()\n  }, [show])\n\n  const onClick = (fn: (ctx: Ctx) => void) => (e: MouseEvent) => {\n    e.preventDefault()\n    ctx && fn(ctx)\n    update()\n  }\n\n  const isActive = (mark: MarkType) => {\n    if (!ctx)\n      return false\n    const view = ctx.get(editorViewCtx)\n    const { state: { doc, selection } } = view\n    return doc.rangeHasMark(selection.from, selection.to, mark)\n  }\n\n  return html`<host>\n    <button\n      class=${clsx('toolbar-item', ctx && isActive(strongSchema.type(ctx)) && 'active')}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleStrongCommand.key)\n      })}\n    >\n      ${config?.boldIcon?.() ?? boldIcon}\n    </button>\n    <button\n      class=${clsx('toolbar-item', ctx && isActive(emphasisSchema.type(ctx)) && 'active')}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleEmphasisCommand.key)\n      })}\n    >\n      ${config?.italicIcon?.() ?? italicIcon}\n    </button>\n    <button\n      class=${clsx('toolbar-item', ctx && isActive(strikethroughSchema.type(ctx)) && 'active')}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleStrikethroughCommand.key)\n      })}\n    >\n      ${config?.strikethroughIcon?.() ?? strikethroughIcon}\n    </button>\n    <div class=\"divider\"></div>\n    <button\n      class=${clsx('toolbar-item', ctx && isActive(inlineCodeSchema.type(ctx)) && 'active')}\n      onmousedown=${onClick((ctx) => {\n        const commands = ctx.get(commandsCtx)\n        commands.call(toggleInlineCodeCommand.key)\n      })}\n    >\n      ${config?.codeIcon?.() ?? codeIcon}\n    </button>\n    <button\n      class=${clsx('toolbar-item', ctx && isActive(linkSchema.type(ctx)) && 'active')}\n      onmousedown=${onClick((ctx) => {\n        const view = ctx.get(editorViewCtx)\n        const { selection } = view.state\n\n        if (isActive(linkSchema.type(ctx))) {\n          ctx.get(linkTooltipAPI.key).removeLink(selection.from, selection.to)\n          return\n        }\n\n        ctx.get(linkTooltipAPI.key).addLink(selection.from, selection.to)\n        hide?.()\n      })}\n    >\n      ${config?.linkIcon?.() ?? linkIcon}\n    </button>\n  </host>`\n}\n\ntoolbarComponent.props = {\n  ctx: Object,\n  hide: Function,\n  show: Boolean,\n  config: Object,\n}\n\nexport const ToolbarElement = c(toolbarComponent)\n", "import { TooltipProvider, tooltipFactory } from '@milkdown/kit/plugin/tooltip'\nimport type { EditorState, PluginView } from '@milkdown/kit/prose/state'\nimport { TextSelection } from '@milkdown/kit/prose/state'\nimport type { Ctx } from '@milkdown/kit/ctx'\nimport type { EditorView } from '@milkdown/kit/prose/view'\nimport type { AtomicoThis } from 'atomico/types/dom'\nimport type { DefineFeature, Icon } from '../shared'\nimport { defIfNotExists } from '../../utils'\nimport type { ToolbarProps } from './component'\nimport { ToolbarElement } from './component'\n\ninterface ToolbarConfig {\n  boldIcon: Icon\n  codeIcon: Icon\n  italicIcon: Icon\n  linkIcon: Icon\n  strikethroughIcon: Icon\n}\n\nexport type ToolbarFeatureConfig = Partial<ToolbarConfig>\n\nconst toolbar = tooltipFactory('CREPE_TOOLBAR')\n\nclass ToolbarView implements PluginView {\n  #tooltipProvider: TooltipProvider\n  #content: AtomicoThis<ToolbarProps>\n  constructor(ctx: Ctx, view: EditorView, config?: ToolbarFeatureConfig) {\n    const content = new ToolbarElement()\n    this.#content = content\n    this.#content.ctx = ctx\n    this.#content.hide = this.hide\n    this.#content.config = config\n\n    this.#tooltipProvider = new TooltipProvider({\n      content: this.#content,\n      debounce: 20,\n      offset: 10,\n      shouldShow(view: EditorView) {\n        const { doc, selection } = view.state\n        const { empty, from, to } = selection\n\n        const isEmptyTextBlock = !doc.textBetween(from, to).length && selection instanceof TextSelection\n\n        const isNotTextBlock = !(selection instanceof TextSelection)\n\n        const activeElement = (view.dom.getRootNode() as ShadowRoot | Document).activeElement\n        const isTooltipChildren = content.contains(activeElement)\n\n        const notHasFocus = !view.hasFocus() && !isTooltipChildren\n\n        const isReadonly = !view.editable\n\n        if (\n          notHasFocus\n          || isNotTextBlock\n          || empty\n          || isEmptyTextBlock\n          || isReadonly\n        )\n          return false\n\n        return true\n      },\n    })\n    this.#tooltipProvider.onShow = () => {\n      this.#content.show = true\n    }\n    this.#tooltipProvider.onHide = () => {\n      this.#content.show = false\n    }\n    this.update(view)\n  }\n\n  update = (view: EditorView, prevState?: EditorState) => {\n    this.#tooltipProvider.update(view, prevState)\n  }\n\n  destroy = () => {\n    this.#tooltipProvider.destroy()\n    this.#content.remove()\n  }\n\n  hide = () => {\n    this.#tooltipProvider.hide()\n  }\n}\n\ndefIfNotExists('milkdown-toolbar', ToolbarElement)\nexport const defineFeature: DefineFeature<ToolbarFeatureConfig> = (editor, config) => {\n  editor\n    .config((ctx) => {\n      ctx.set(toolbar.key, {\n        view: view => new ToolbarView(ctx, view, config),\n      })\n    })\n    .use(toolbar)\n}\n"],
  "mappings": "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",
  "names": ["ctx", "view"]
}
