{"version":3,"file":"index.es.js","sources":["../../src/__internal__/meta.ts","../../src/code-block/config.ts","../../src/__internal__/helper.ts","../../src/code-block/view/node-view.ts","../../src/code-block/view/loader.ts","../../src/code-block/view/component.ts","../../src/code-block/view/index.ts","../../src/code-block/index.ts"],"sourcesContent":["import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(plugin: T, meta: Partial<Meta> & Pick<Meta, 'displayName'>): T {\n  Object.assign(plugin, {\n    meta: {\n      package: '@milkdown/components',\n      ...meta,\n    },\n  })\n\n  return plugin\n}\n","import { $ctx } from '@milkdown/utils'\nimport type { Extension } from '@codemirror/state'\nimport type { LanguageDescription } from '@codemirror/language'\nimport { html } from 'atomico'\nimport { withMeta } from '../__internal__/meta'\n\nexport interface CodeBlockConfig {\n  extensions: Extension[]\n  languages: LanguageDescription[]\n  expandIcon: () => ReturnType<typeof html> | string | HTMLElement\n  searchIcon: () => ReturnType<typeof html> | string | HTMLElement\n  clearSearchIcon: () => ReturnType<typeof html> | string | HTMLElement\n  searchPlaceholder: string\n  noResultText: string\n  renderLanguage: (language: string, selected: boolean) => ReturnType<typeof html>\n}\n\nexport const defaultConfig: CodeBlockConfig = {\n  extensions: [],\n  languages: [],\n  expandIcon: () => '⬇',\n  searchIcon: () => '🔍',\n  clearSearchIcon: () => '⌫',\n  searchPlaceholder: 'Search language',\n  noResultText: 'No result',\n  renderLanguage: language => html`${language}`,\n}\n\nexport const codeBlockConfig = $ctx(defaultConfig, 'codeBlockConfigCtx')\n\nwithMeta(codeBlockConfig, {\n  displayName: 'Config<code-block>',\n  group: 'CodeBlock',\n})\n","export function defIfNotExists(tagName: string, element: CustomElementConstructor) {\n  const current = customElements.get(tagName)\n  if (current == null) {\n    customElements.define(tagName, element)\n    return\n  }\n\n  if (current === element)\n    return\n\n  console.warn(`Custom element ${tagName} has been defined before.`)\n}\n","import type { EditorView, NodeView } from '@milkdown/prose/view'\nimport { EditorView as CodeMirror, type KeyBinding, type ViewUpdate, keymap as cmKeymap } from '@codemirror/view'\nimport type { Node } from '@milkdown/prose/model'\nimport { redo, undo } from '@milkdown/prose/history'\nimport { Compartment, EditorState } from '@codemirror/state'\nimport type { Line, SelectionRange } from '@codemirror/state'\nimport { exitCode } from '@milkdown/prose/commands'\nimport { TextSelection } from '@milkdown/prose/state'\n\nimport type { CodeBlockConfig } from '../config'\nimport type { CodeComponentProps } from './component'\nimport type { LanguageLoader } from './loader'\n\nexport class CodeMirrorBlock implements NodeView {\n  dom: HTMLElement & CodeComponentProps\n  cm: CodeMirror\n\n  private updating = false\n  private languageName: string = ''\n\n  private readonly languageConf: Compartment\n  private readonly readOnlyConf: Compartment\n\n  constructor(\n    public node: Node,\n    public view: EditorView,\n    public getPos: () => number | undefined,\n    public loader: LanguageLoader,\n    public config: CodeBlockConfig,\n  ) {\n    this.languageConf = new Compartment()\n    this.readOnlyConf = new Compartment()\n\n    this.cm = new CodeMirror({\n      doc: this.node.textContent,\n      root: this.view.root,\n      extensions: [\n        this.readOnlyConf.of(EditorState.readOnly.of(!this.view.editable)),\n        cmKeymap.of(this.codeMirrorKeymap()),\n        this.languageConf.of([]),\n        ...config.extensions,\n        CodeMirror.updateListener.of(this.forwardUpdate),\n      ],\n    })\n\n    this.dom = this.createDom()\n\n    this.updateLanguage()\n  }\n\n  private forwardUpdate = (update: ViewUpdate) => {\n    if (this.updating || !this.cm.hasFocus)\n      return\n    let offset = (this.getPos() ?? 0) + 1\n    const { main } = update.state.selection\n    const selFrom = offset + main.from\n    const selTo = offset + main.to\n    const pmSel = this.view.state.selection\n    if (update.docChanged || pmSel.from !== selFrom || pmSel.to !== selTo) {\n      const tr = this.view.state.tr\n      update.changes.iterChanges((fromA, toA, fromB, toB, text) => {\n        if (text.length)\n          tr.replaceWith(offset + fromA, offset + toA, this.view.state.schema.text(text.toString()))\n        else tr.delete(offset + fromA, offset + toA)\n        offset += (toB - fromB) - (toA - fromA)\n      })\n      tr.setSelection(TextSelection.create(tr.doc, selFrom, selTo))\n      this.view.dispatch(tr)\n    }\n  }\n\n  private createDom() {\n    const dom = document.createElement('milkdown-code-block') as HTMLElement & CodeComponentProps\n    dom.codemirror = this.cm\n    dom.getAllLanguages = this.getAllLanguages\n    dom.setLanguage = this.setLanguage\n    dom.isEditorReadonly = () => !this.view.editable\n    const {\n      languages,\n      extensions,\n      ...viewConfig\n    } = this.config\n    dom.config = viewConfig\n    return dom\n  }\n\n  private updateLanguage() {\n    const languageName = this.node.attrs.language\n\n    if (languageName === this.languageName)\n      return\n\n    this.dom.language = languageName\n    const language = this.loader.load(languageName ?? '')\n\n    language.then((lang) => {\n      if (lang) {\n        this.cm.dispatch({\n          effects: this.languageConf.reconfigure(lang),\n        })\n        this.languageName = languageName\n      }\n    })\n  }\n\n  private codeMirrorKeymap = (): KeyBinding[] => {\n    const view = this.view\n    return [\n      { key: 'ArrowUp', run: () => this.maybeEscape('line', -1) },\n      { key: 'ArrowLeft', run: () => this.maybeEscape('char', -1) },\n      { key: 'ArrowDown', run: () => this.maybeEscape('line', 1) },\n      { key: 'ArrowRight', run: () => this.maybeEscape('char', 1) },\n      {\n        key: 'Mod-Enter',\n        run: () => {\n          if (!exitCode(view.state, view.dispatch))\n            return false\n\n          view.focus()\n          return true\n        },\n      },\n      { key: 'Mod-z', run: () => undo(view.state, view.dispatch) },\n      { key: 'Shift-Mod-z', run: () => redo(view.state, view.dispatch) },\n      { key: 'Mod-y', run: () => redo(view.state, view.dispatch) },\n      {\n        key: 'Backspace',\n        run: () => {\n          const ranges = this.cm.state.selection.ranges\n\n          if (ranges.length > 1)\n            return false\n\n          const selection = ranges[0]\n\n          if (selection && (!selection.empty || selection.anchor > 0))\n            return false\n\n          if (this.cm.state.doc.lines >= 2)\n            return false\n\n          const state = this.view.state\n          const pos = this.getPos() ?? 0\n          const tr = state.tr.replaceWith(pos, pos + this.node.nodeSize, state.schema.nodes.paragraph!.createChecked({}, this.node.content))\n\n          tr.setSelection(TextSelection.near(tr.doc.resolve(pos)))\n\n          this.view.dispatch(tr)\n          this.view.focus()\n          return true\n        },\n      },\n    ]\n  }\n\n  private maybeEscape = (unit: 'line' | 'char', dir: -1 | 1): boolean => {\n    const { state } = this.cm\n    let main: SelectionRange | Line = state.selection.main\n    if (!main.empty)\n      return false\n    if (unit === 'line')\n      main = state.doc.lineAt(main.head)\n    if (dir < 0 ? main.from > 0 : main.to < state.doc.length)\n      return false\n\n    const targetPos = (this.getPos() ?? 0) + (dir < 0 ? 0 : this.node.nodeSize)\n    const selection = TextSelection.near(this.view.state.doc.resolve(targetPos), dir)\n    const tr = this.view.state.tr.setSelection(selection).scrollIntoView()\n    this.view.dispatch(tr)\n    this.view.focus()\n    return true\n  }\n\n  setSelection(anchor: number, head: number) {\n    if (!this.cm.dom.isConnected)\n      return\n\n    this.cm.focus()\n    this.updating = true\n    this.cm.dispatch({ selection: { anchor, head } })\n    this.updating = false\n  }\n\n  update(node: Node) {\n    if (node.type !== this.node.type)\n      return false\n\n    if (this.updating)\n      return true\n\n    this.node = node\n    this.updateLanguage()\n    if (this.view.editable === this.cm.state.readOnly) {\n      this.cm.dispatch({\n        effects: this.readOnlyConf.reconfigure(EditorState.readOnly.of(!this.view.editable)),\n      })\n    }\n\n    const change = computeChange(this.cm.state.doc.toString(), node.textContent)\n    if (change) {\n      this.updating = true\n      this.cm.dispatch({\n        changes: { from: change.from, to: change.to, insert: change.text },\n      })\n      this.updating = false\n    }\n    return true\n  }\n\n  selectNode() {\n    this.dom.selected = true\n    this.cm.focus()\n  }\n\n  deselectNode() {\n    this.dom.selected = false\n  }\n\n  stopEvent() {\n    return true\n  }\n\n  destroy() {\n    this.cm.destroy()\n  }\n\n  setLanguage = (language: string) => {\n    this.view.dispatch(\n      this.view.state.tr.setNodeAttribute(this.getPos() ?? 0, 'language', language),\n    )\n  }\n\n  getAllLanguages = () => {\n    return this.loader.getAll()\n  }\n}\n\nfunction computeChange(\n  oldVal: string,\n  newVal: string,\n): { from: number, to: number, text: string } | null {\n  if (oldVal === newVal)\n    return null\n\n  let start = 0\n  let oldEnd = oldVal.length\n  let newEnd = newVal.length\n\n  while (start < oldEnd && oldVal.charCodeAt(start) === newVal.charCodeAt(start))\n    ++start\n\n  while (\n    oldEnd > start\n    && newEnd > start\n    && oldVal.charCodeAt(oldEnd - 1) === newVal.charCodeAt(newEnd - 1)\n  ) {\n    oldEnd--\n    newEnd--\n  }\n\n  return { from: start, to: oldEnd, text: newVal.slice(start, newEnd) }\n}\n","import type { LanguageDescription, LanguageSupport } from '@codemirror/language'\n\nexport interface LanguageInfo {\n  name: string\n  alias: readonly string[]\n}\n\nexport class LanguageLoader {\n  private readonly map: Record<string, LanguageDescription>\n\n  constructor(private languages: LanguageDescription[]) {\n    this.map = {}\n\n    languages.forEach((language) => {\n      language.alias.forEach((alias) => {\n        this.map[alias] = language\n      })\n    })\n  }\n\n  getAll(): LanguageInfo[] {\n    return this.languages.map((language): LanguageInfo => {\n      return {\n        name: language.name,\n        alias: language.alias,\n      }\n    })\n  }\n\n  load(languageName: string): Promise<LanguageSupport | undefined> {\n    const languageMap = this.map\n    const language = languageMap[languageName.toLowerCase()]\n\n    if (!language)\n      return Promise.resolve(undefined)\n\n    if (language.support)\n      return Promise.resolve(language.support)\n\n    return language.load()\n  }\n}\n","import type { EditorView as CodeMirror } from '@codemirror/view'\nimport type { Component } from 'atomico'\nimport { c, h, html, useEffect, useHost, useLayoutEffect, useMemo, useRef, useState } from 'atomico'\nimport { computePosition } from '@floating-ui/dom'\nimport clsx from 'clsx'\nimport type { CodeBlockConfig } from '../config'\nimport type { LanguageInfo } from './loader'\n\nexport interface CodeComponentProps {\n  selected: boolean\n  codemirror: CodeMirror\n  language: string\n  getAllLanguages: () => Array<LanguageInfo>\n  setLanguage: (language: string) => void\n  isEditorReadonly: () => boolean\n  config: Omit<CodeBlockConfig, 'languages' | 'extensions'>\n}\n\nexport const codeComponent: Component<CodeComponentProps> = ({\n  selected = false,\n  codemirror,\n  getAllLanguages,\n  setLanguage,\n  language,\n  config,\n  isEditorReadonly,\n}) => {\n  const host = useHost()\n  const triggerRef = useRef<HTMLButtonElement>()\n  const pickerRef = useRef<HTMLDivElement>()\n  const [filter, setFilter] = useState('')\n  const [showPicker, setShowPicker] = useState(false)\n\n  const root = useMemo(() => host.current.getRootNode() as HTMLElement, [host])\n\n  useEffect(() => {\n    const lang = getAllLanguages?.()?.find(languageInfo =>\n      languageInfo.alias.some(alias =>\n        alias.toLowerCase() === language?.toLowerCase()))\n\n    if (lang && lang.name !== language)\n      setLanguage?.(lang.name)\n  }, [language])\n\n  useEffect(() => {\n    setShowPicker(false)\n  }, [language])\n\n  useEffect(() => {\n    const clickHandler = (e: MouseEvent) => {\n      const target = e.target as HTMLElement\n\n      if (triggerRef.current && triggerRef.current.contains(target))\n        return\n\n      const picker = pickerRef.current\n      if (!picker)\n        return\n\n      if (picker.dataset.expanded !== 'true')\n        return\n\n      if (!picker.contains(target))\n        setShowPicker(false)\n    }\n\n    root.addEventListener('click', clickHandler)\n\n    return () => {\n      root.removeEventListener('click', clickHandler)\n    }\n  }, [])\n\n  useLayoutEffect(() => {\n    setFilter('')\n    const picker = triggerRef.current\n    const languageList = pickerRef.current\n    if (!picker || !languageList)\n      return\n\n    computePosition(picker, languageList, {\n      placement: 'bottom-start',\n    }).then(({ x, y }) => {\n      Object.assign(languageList.style, {\n        left: `${x}px`,\n        top: `${y}px`,\n      })\n    })\n  }, [showPicker])\n\n  const languages = useMemo(() => {\n    if (!showPicker)\n      return []\n\n    const all = getAllLanguages?.() ?? []\n\n    const selected = all.find(languageInfo => languageInfo.name.toLowerCase() === language?.toLowerCase())\n\n    const filtered = all.filter((languageInfo) => {\n      return (languageInfo.name.toLowerCase().includes(filter.toLowerCase())\n        || languageInfo.alias.some(alias => alias.toLowerCase().includes(filter.toLowerCase()))) && languageInfo !== selected\n    })\n\n    if (filtered.length === 0)\n      return []\n\n    if (!selected)\n      return filtered\n\n    return [selected, ...filtered]\n  }, [filter, showPicker, language])\n\n  const changeFilter = (e: InputEvent) => {\n    const target = e.target as HTMLInputElement\n    setFilter(target.value)\n  }\n\n  const onTogglePicker = (e: Event) => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (isEditorReadonly?.())\n      return\n\n    setShowPicker((show) => {\n      return !show\n    })\n  }\n\n  const onClear = (e: MouseEvent) => {\n    e.preventDefault()\n    setFilter('')\n  }\n\n  const onSearchKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Escape')\n      setFilter('')\n  }\n\n  const onListKeydown = (e: KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      const active = document.activeElement\n      if (active instanceof HTMLElement && active.dataset.language)\n        setLanguage?.(active.dataset.language)\n    }\n  }\n\n  const renderedLanguageList = useMemo(() => {\n    if (!languages?.length)\n      return html`<li class=\"language-list-item no-result\">${config?.noResultText}</li>`\n\n    return languages.map(languageInfo =>\n      html`<li\n        role=\"listitem\"\n        tabindex=\"0\"\n        class=\"language-list-item\"\n        aria-selected=${languageInfo.name.toLowerCase() === language?.toLowerCase()}\n        data-language=${languageInfo.name}\n        onclick=${() => setLanguage?.(languageInfo.name)}\n      >\n        ${config?.renderLanguage?.(languageInfo.name, languageInfo.name.toLowerCase() === language?.toLowerCase())}\n      </li>`,\n    )\n  }, [languages])\n\n  return html`<host class=${clsx(selected && 'selected')}>\n    <div class=\"tools\">\n      <button\n        ref=${triggerRef}\n        class=\"language-button\"\n        onpointerdown=${onTogglePicker}\n        data-expanded=${showPicker}\n      >\n        ${language || 'Text'}\n        <div class=\"expand-icon\">\n          ${config?.expandIcon?.()}\n        </div>\n      </button>\n      <div ref=${pickerRef} data-expanded=${showPicker} class=${clsx('language-picker', showPicker && 'show')}>\n        <div class=\"list-wrapper\">\n          <div class=\"search-box\">\n            <div class=\"search-icon\">\n              ${config?.searchIcon?.()}\n            </div>\n            <input\n              class=\"search-input\"\n              placeholder=${config?.searchPlaceholder}\n              value=${filter}\n              oninput=${changeFilter}\n              onkeydown=${onSearchKeydown}\n            />\n            <div class=${clsx('clear-icon', filter.length === 0 && 'hidden')} onmousedown=${onClear}>\n              ${config?.clearSearchIcon?.()}\n            </div>\n          </div>\n          <ul class=\"language-list\" role=\"listbox\" onkeydown=${onListKeydown}>\n            ${renderedLanguageList}\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"codemirror-host\">${h(codemirror?.dom, {})}</div>\n  </host>`\n}\n\ncodeComponent.props = {\n  selected: Boolean,\n  codemirror: Object,\n  language: String,\n  getAllLanguages: Function,\n  setLanguage: Function,\n  isEditorReadonly: Function,\n  config: Object,\n}\n\nexport const CodeElement = c(codeComponent)\n","import { $view } from '@milkdown/utils'\nimport { codeBlockSchema } from '@milkdown/preset-commonmark'\nimport type { NodeViewConstructor } from '@milkdown/prose/view'\nimport { codeBlockConfig } from '../config'\nimport { withMeta } from '../../__internal__/meta'\nimport { defIfNotExists } from '../../__internal__/helper'\nimport { CodeMirrorBlock } from './node-view'\nimport { LanguageLoader } from './loader'\nimport { CodeElement } from './component'\n\ndefIfNotExists('milkdown-code-block', CodeElement)\nexport const codeBlockView = $view(codeBlockSchema.node, (ctx): NodeViewConstructor => {\n  const config = ctx.get(codeBlockConfig.key)\n  const languageLoader = new LanguageLoader(config.languages)\n  return (node, view, getPos) => new CodeMirrorBlock(\n    node,\n    view,\n    getPos,\n    languageLoader,\n    config,\n  )\n})\n\nwithMeta(codeBlockView, {\n  displayName: 'NodeView<code-block>',\n  group: 'CodeBlock',\n})\n","import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { codeBlockView } from './view'\nimport { codeBlockConfig } from './config'\n\nexport * from './config'\nexport * from './view'\n\nexport const codeBlockComponent: MilkdownPlugin[] = [\n  codeBlockView,\n  codeBlockConfig,\n]\n"],"names":["CodeMirror","cmKeymap","_a","selected"],"mappings":"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"}